# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# header params
AuthorizationSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            cert_operation = schemas.StrSchema
            csr = schemas.StrSchema
            
            
            class extra_details(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        org_id = schemas.StrSchema
                        mdm_deploy_key = schemas.StrSchema
                        mdm_vendor_name = schemas.StrSchema
                        mdm_present = schemas.BoolSchema
                        mdm_vendor_udid = schemas.StrSchema
                        serial_number = schemas.StrSchema
                        model = schemas.StrSchema
                        csr = schemas.StrSchema
                        ownership = schemas.StrSchema
                        platform = schemas.StrSchema
                        os = schemas.StrSchema
                        architecture = schemas.StrSchema
                        device_friendly_name = schemas.StrSchema
                        app_version = schemas.StrSchema
                        __annotations__ = {
                            "org_id": org_id,
                            "mdm_deploy_key": mdm_deploy_key,
                            "mdm_vendor_name": mdm_vendor_name,
                            "mdm_present": mdm_present,
                            "mdm_vendor_udid": mdm_vendor_udid,
                            "serial_number": serial_number,
                            "model": model,
                            "csr": csr,
                            "ownership": ownership,
                            "platform": platform,
                            "os": os,
                            "architecture": architecture,
                            "device_friendly_name": device_friendly_name,
                            "app_version": app_version,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mdm_deploy_key"]) -> MetaOapg.properties.mdm_deploy_key: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mdm_vendor_name"]) -> MetaOapg.properties.mdm_vendor_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mdm_present"]) -> MetaOapg.properties.mdm_present: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mdm_vendor_udid"]) -> MetaOapg.properties.mdm_vendor_udid: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["csr"]) -> MetaOapg.properties.csr: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ownership"]) -> MetaOapg.properties.ownership: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["os"]) -> MetaOapg.properties.os: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["architecture"]) -> MetaOapg.properties.architecture: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["device_friendly_name"]) -> MetaOapg.properties.device_friendly_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["app_version"]) -> MetaOapg.properties.app_version: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["org_id", "mdm_deploy_key", "mdm_vendor_name", "mdm_present", "mdm_vendor_udid", "serial_number", "model", "csr", "ownership", "platform", "os", "architecture", "device_friendly_name", "app_version", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mdm_deploy_key"]) -> typing.Union[MetaOapg.properties.mdm_deploy_key, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mdm_vendor_name"]) -> typing.Union[MetaOapg.properties.mdm_vendor_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mdm_present"]) -> typing.Union[MetaOapg.properties.mdm_present, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mdm_vendor_udid"]) -> typing.Union[MetaOapg.properties.mdm_vendor_udid, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["csr"]) -> typing.Union[MetaOapg.properties.csr, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ownership"]) -> typing.Union[MetaOapg.properties.ownership, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union[MetaOapg.properties.platform, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["os"]) -> typing.Union[MetaOapg.properties.os, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["architecture"]) -> typing.Union[MetaOapg.properties.architecture, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["device_friendly_name"]) -> typing.Union[MetaOapg.properties.device_friendly_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["app_version"]) -> typing.Union[MetaOapg.properties.app_version, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["org_id", "mdm_deploy_key", "mdm_vendor_name", "mdm_present", "mdm_vendor_udid", "serial_number", "model", "csr", "ownership", "platform", "os", "architecture", "device_friendly_name", "app_version", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    org_id: typing.Union[MetaOapg.properties.org_id, str, schemas.Unset] = schemas.unset,
                    mdm_deploy_key: typing.Union[MetaOapg.properties.mdm_deploy_key, str, schemas.Unset] = schemas.unset,
                    mdm_vendor_name: typing.Union[MetaOapg.properties.mdm_vendor_name, str, schemas.Unset] = schemas.unset,
                    mdm_present: typing.Union[MetaOapg.properties.mdm_present, bool, schemas.Unset] = schemas.unset,
                    mdm_vendor_udid: typing.Union[MetaOapg.properties.mdm_vendor_udid, str, schemas.Unset] = schemas.unset,
                    serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
                    model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
                    csr: typing.Union[MetaOapg.properties.csr, str, schemas.Unset] = schemas.unset,
                    ownership: typing.Union[MetaOapg.properties.ownership, str, schemas.Unset] = schemas.unset,
                    platform: typing.Union[MetaOapg.properties.platform, str, schemas.Unset] = schemas.unset,
                    os: typing.Union[MetaOapg.properties.os, str, schemas.Unset] = schemas.unset,
                    architecture: typing.Union[MetaOapg.properties.architecture, str, schemas.Unset] = schemas.unset,
                    device_friendly_name: typing.Union[MetaOapg.properties.device_friendly_name, str, schemas.Unset] = schemas.unset,
                    app_version: typing.Union[MetaOapg.properties.app_version, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'extra_details':
                    return super().__new__(
                        cls,
                        *args,
                        org_id=org_id,
                        mdm_deploy_key=mdm_deploy_key,
                        mdm_vendor_name=mdm_vendor_name,
                        mdm_present=mdm_present,
                        mdm_vendor_udid=mdm_vendor_udid,
                        serial_number=serial_number,
                        model=model,
                        csr=csr,
                        ownership=ownership,
                        platform=platform,
                        os=os,
                        architecture=architecture,
                        device_friendly_name=device_friendly_name,
                        app_version=app_version,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "cert_operation": cert_operation,
                "csr": csr,
                "extra_details": extra_details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cert_operation"]) -> MetaOapg.properties.cert_operation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csr"]) -> MetaOapg.properties.csr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_details"]) -> MetaOapg.properties.extra_details: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cert_operation", "csr", "extra_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cert_operation"]) -> typing.Union[MetaOapg.properties.cert_operation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csr"]) -> typing.Union[MetaOapg.properties.csr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_details"]) -> typing.Union[MetaOapg.properties.extra_details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cert_operation", "csr", "extra_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cert_operation: typing.Union[MetaOapg.properties.cert_operation, str, schemas.Unset] = schemas.unset,
        csr: typing.Union[MetaOapg.properties.csr, str, schemas.Unset] = schemas.unset,
        extra_details: typing.Union[MetaOapg.properties.extra_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            cert_operation=cert_operation,
            csr=csr,
            extra_details=extra_details,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            request_id = schemas.StrSchema
            error_code = schemas.IntSchema
            error_description = schemas.StrSchema
            
            
            class data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        root_ca_certs = schemas.IntSchema
                        intermediate_ca_certs = schemas.IntSchema
                        client_cert = schemas.StrSchema
                        client_cert_password = schemas.StrSchema
                        __annotations__ = {
                            "root_ca_certs": root_ca_certs,
                            "intermediate_ca_certs": intermediate_ca_certs,
                            "client_cert": client_cert,
                            "client_cert_password": client_cert_password,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["root_ca_certs"]) -> MetaOapg.properties.root_ca_certs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["intermediate_ca_certs"]) -> MetaOapg.properties.intermediate_ca_certs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["client_cert"]) -> MetaOapg.properties.client_cert: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["client_cert_password"]) -> MetaOapg.properties.client_cert_password: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["root_ca_certs", "intermediate_ca_certs", "client_cert", "client_cert_password", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["root_ca_certs"]) -> typing.Union[MetaOapg.properties.root_ca_certs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["intermediate_ca_certs"]) -> typing.Union[MetaOapg.properties.intermediate_ca_certs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["client_cert"]) -> typing.Union[MetaOapg.properties.client_cert, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["client_cert_password"]) -> typing.Union[MetaOapg.properties.client_cert_password, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["root_ca_certs", "intermediate_ca_certs", "client_cert", "client_cert_password", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    root_ca_certs: typing.Union[MetaOapg.properties.root_ca_certs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    intermediate_ca_certs: typing.Union[MetaOapg.properties.intermediate_ca_certs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    client_cert: typing.Union[MetaOapg.properties.client_cert, str, schemas.Unset] = schemas.unset,
                    client_cert_password: typing.Union[MetaOapg.properties.client_cert_password, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *args,
                        root_ca_certs=root_ca_certs,
                        intermediate_ca_certs=intermediate_ca_certs,
                        client_cert=client_cert,
                        client_cert_password=client_cert_password,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "request_id": request_id,
                "error_code": error_code,
                "error_description": error_description,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_description"]) -> MetaOapg.properties.error_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_description"]) -> typing.Union[MetaOapg.properties.error_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        error_code: typing.Union[MetaOapg.properties.error_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error_description: typing.Union[MetaOapg.properties.error_description, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            request_id=request_id,
            error_code=error_code,
            error_description=error_description,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v2_cert_request_device_only_registration_post_oapg(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         POST to get different types of certificates
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_any_type.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V2CertRequestDeviceOnlyRegistrationPost(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v2_cert_request_device_only_registration_post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v2_cert_request_device_only_registration_post_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v2_cert_request_device_only_registration_post_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


