# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            username = schemas.StrSchema
            password = schemas.StrSchema
            orgName = schemas.StrSchema
            session = schemas.StrSchema
            __annotations__ = {
                "username": username,
                "password": password,
                "orgName": orgName,
                "session": session,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgName"]) -> MetaOapg.properties.orgName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session"]) -> MetaOapg.properties.session: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["username", "password", "orgName", "session", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgName"]) -> typing.Union[MetaOapg.properties.orgName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session"]) -> typing.Union[MetaOapg.properties.session, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["username", "password", "orgName", "session", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        orgName: typing.Union[MetaOapg.properties.orgName, str, schemas.Unset] = schemas.unset,
        session: typing.Union[MetaOapg.properties.session, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            username=username,
            password=password,
            orgName=orgName,
            session=session,
            _configuration=_configuration,
            **kwargs,
        )


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            request_id = schemas.StrSchema
            error_code = schemas.IntSchema
            error_description = schemas.StrSchema
            
            
            class data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        UserName = schemas.StrSchema
                        AccessToken = schemas.StrSchema
                        IdToken = schemas.StrSchema
                        ChallengeName = schemas.IntSchema
                        Session = schemas.IntSchema
                        State = schemas.IntSchema
                        OrgName = schemas.StrSchema
                        Error = schemas.IntSchema
                        ErrorMessage = schemas.StrSchema
                        SessionKey = schemas.StrSchema
                        RedirectURL = schemas.StrSchema
                        Expiration = schemas.IntSchema
                        IsAdmin = schemas.BoolSchema
                        __annotations__ = {
                            "UserName": UserName,
                            "AccessToken": AccessToken,
                            "IdToken": IdToken,
                            "ChallengeName": ChallengeName,
                            "Session": Session,
                            "State": State,
                            "OrgName": OrgName,
                            "Error": Error,
                            "ErrorMessage": ErrorMessage,
                            "SessionKey": SessionKey,
                            "RedirectURL": RedirectURL,
                            "Expiration": Expiration,
                            "IsAdmin": IsAdmin,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["UserName"]) -> MetaOapg.properties.UserName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AccessToken"]) -> MetaOapg.properties.AccessToken: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IdToken"]) -> MetaOapg.properties.IdToken: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ChallengeName"]) -> MetaOapg.properties.ChallengeName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Session"]) -> MetaOapg.properties.Session: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["State"]) -> MetaOapg.properties.State: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["OrgName"]) -> MetaOapg.properties.OrgName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Error"]) -> MetaOapg.properties.Error: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ErrorMessage"]) -> MetaOapg.properties.ErrorMessage: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["SessionKey"]) -> MetaOapg.properties.SessionKey: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["RedirectURL"]) -> MetaOapg.properties.RedirectURL: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Expiration"]) -> MetaOapg.properties.Expiration: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IsAdmin"]) -> MetaOapg.properties.IsAdmin: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["UserName", "AccessToken", "IdToken", "ChallengeName", "Session", "State", "OrgName", "Error", "ErrorMessage", "SessionKey", "RedirectURL", "Expiration", "IsAdmin", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["UserName"]) -> typing.Union[MetaOapg.properties.UserName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AccessToken"]) -> typing.Union[MetaOapg.properties.AccessToken, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IdToken"]) -> typing.Union[MetaOapg.properties.IdToken, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ChallengeName"]) -> typing.Union[MetaOapg.properties.ChallengeName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Session"]) -> typing.Union[MetaOapg.properties.Session, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["State"]) -> typing.Union[MetaOapg.properties.State, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["OrgName"]) -> typing.Union[MetaOapg.properties.OrgName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Error"]) -> typing.Union[MetaOapg.properties.Error, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ErrorMessage"]) -> typing.Union[MetaOapg.properties.ErrorMessage, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["SessionKey"]) -> typing.Union[MetaOapg.properties.SessionKey, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["RedirectURL"]) -> typing.Union[MetaOapg.properties.RedirectURL, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Expiration"]) -> typing.Union[MetaOapg.properties.Expiration, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IsAdmin"]) -> typing.Union[MetaOapg.properties.IsAdmin, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["UserName", "AccessToken", "IdToken", "ChallengeName", "Session", "State", "OrgName", "Error", "ErrorMessage", "SessionKey", "RedirectURL", "Expiration", "IsAdmin", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    UserName: typing.Union[MetaOapg.properties.UserName, str, schemas.Unset] = schemas.unset,
                    AccessToken: typing.Union[MetaOapg.properties.AccessToken, str, schemas.Unset] = schemas.unset,
                    IdToken: typing.Union[MetaOapg.properties.IdToken, str, schemas.Unset] = schemas.unset,
                    ChallengeName: typing.Union[MetaOapg.properties.ChallengeName, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    Session: typing.Union[MetaOapg.properties.Session, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    State: typing.Union[MetaOapg.properties.State, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    OrgName: typing.Union[MetaOapg.properties.OrgName, str, schemas.Unset] = schemas.unset,
                    Error: typing.Union[MetaOapg.properties.Error, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    ErrorMessage: typing.Union[MetaOapg.properties.ErrorMessage, str, schemas.Unset] = schemas.unset,
                    SessionKey: typing.Union[MetaOapg.properties.SessionKey, str, schemas.Unset] = schemas.unset,
                    RedirectURL: typing.Union[MetaOapg.properties.RedirectURL, str, schemas.Unset] = schemas.unset,
                    Expiration: typing.Union[MetaOapg.properties.Expiration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    IsAdmin: typing.Union[MetaOapg.properties.IsAdmin, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *args,
                        UserName=UserName,
                        AccessToken=AccessToken,
                        IdToken=IdToken,
                        ChallengeName=ChallengeName,
                        Session=Session,
                        State=State,
                        OrgName=OrgName,
                        Error=Error,
                        ErrorMessage=ErrorMessage,
                        SessionKey=SessionKey,
                        RedirectURL=RedirectURL,
                        Expiration=Expiration,
                        IsAdmin=IsAdmin,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "request_id": request_id,
                "error_code": error_code,
                "error_description": error_description,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_description"]) -> MetaOapg.properties.error_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_description"]) -> typing.Union[MetaOapg.properties.error_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        error_code: typing.Union[MetaOapg.properties.error_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error_description: typing.Union[MetaOapg.properties.error_description, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            request_id=request_id,
            error_code=error_code,
            error_description=error_description,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_banyanidp_enduser_newpassword_post_oapg(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         New Password for Banyan Local user
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_any_type.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1BanyanidpEnduserNewpasswordPost(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_banyanidp_enduser_newpassword_post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_banyanidp_enduser_newpassword_post_oapg(
            body=body,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_banyanidp_enduser_newpassword_post_oapg(
            body=body,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


