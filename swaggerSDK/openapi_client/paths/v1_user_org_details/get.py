# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# header params
AuthorizationSchema = schemas.StrSchema
Model2ContentTypeSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
        '2. Content-Type': typing.Union[Model2ContentTypeSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
)
request_header__2__content_type = api_client.HeaderParameter(
    name="2. Content-Type",
    style=api_client.ParameterStyle.SIMPLE,
    schema=Model2ContentTypeSchema,
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            OrgName = schemas.StrSchema
            First = schemas.StrSchema
            Last = schemas.StrSchema
            Email = schemas.StrSchema
            HashedPassword = schemas.StrSchema
            RegisterKey = schemas.StrSchema
            RegisterDate = schemas.StrSchema
            Notifications = schemas.StrSchema
            LastNotifyTime = schemas.StrSchema
            RefreshToken = schemas.StrSchema
            Profile = schemas.StrSchema
            OrgID = schemas.StrSchema
            OrgRegisterDate = schemas.StrSchema
            CollectorActive = schemas.StrSchema
            CIRegistered = schemas.StrSchema
            RTRegistered = schemas.StrSchema
            ImagesAfter = schemas.StrSchema
            MaxPerRepo = schemas.IntSchema
            HistoryHours = schemas.IntSchema
            IDPName = schemas.StrSchema
            IDPConfig = schemas.StrSchema
            IDPProto = schemas.StrSchema
            MDMName = schemas.StrSchema
            MDMConfig = schemas.StrSchema
            NoVPN = schemas.StrSchema
            DNSName = schemas.StrSchema
            DNSConfig = schemas.StrSchema
            LastUpdatedBy = schemas.StrSchema
            LastUpdatedAt = schemas.IntSchema
            AccessHistoryHours = schemas.IntSchema
            TrustConfig = schemas.StrSchema
            IdentityHistoryHours = schemas.IntSchema
            CloakExceptions = schemas.StrSchema
            RootCert = schemas.StrSchema
            MDMDeployKey = schemas.StrSchema
            MDMDeployOTPSkipRole = schemas.StrSchema
            DeviceRegIDPName = schemas.StrSchema
            DeviceRegIDPConfig = schemas.StrSchema
            DeviceRegIDPProto = schemas.StrSchema
            PWLessConfig = schemas.StrSchema
            ID = schemas.StrSchema
            IsLocalLoginEnabled = schemas.IntSchema
            RefreshTokenForSAMLEnabled = schemas.IntSchema
            SupportMessage = schemas.StrSchema
            SupportLinkTitle = schemas.StrSchema
            SupportLinkUrl = schemas.StrSchema
            AccountType = schemas.StrSchema
            HasRefreshToken = schemas.IntSchema
            IDPType = schemas.StrSchema
            
            
            class ShieldLastActivity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        InsertTime = schemas.StrSchema
                        Status = schemas.StrSchema
                        UUID = schemas.StrSchema
                        __annotations__ = {
                            "InsertTime": InsertTime,
                            "Status": Status,
                            "UUID": UUID,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["InsertTime"]) -> MetaOapg.properties.InsertTime: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["InsertTime"]) -> typing.Union[MetaOapg.properties.InsertTime, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    InsertTime: typing.Union[MetaOapg.properties.InsertTime, str, schemas.Unset] = schemas.unset,
                    Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                    UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ShieldLastActivity':
                    return super().__new__(
                        cls,
                        *args,
                        InsertTime=InsertTime,
                        Status=Status,
                        UUID=UUID,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ShieldLastActivityMap(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class example_udid(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    InsertTime = schemas.StrSchema
                                    Status = schemas.StrSchema
                                    UUID = schemas.StrSchema
                                    __annotations__ = {
                                        "InsertTime": InsertTime,
                                        "Status": Status,
                                        "UUID": UUID,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["InsertTime"]) -> MetaOapg.properties.InsertTime: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["InsertTime"]) -> typing.Union[MetaOapg.properties.InsertTime, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                InsertTime: typing.Union[MetaOapg.properties.InsertTime, str, schemas.Unset] = schemas.unset,
                                Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'example_udid':
                                return super().__new__(
                                    cls,
                                    *args,
                                    InsertTime=InsertTime,
                                    Status=Status,
                                    UUID=UUID,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "example-udid": example_udid,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["example-udid"]) -> MetaOapg.properties.example_udid: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["example-udid", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["example-udid"]) -> typing.Union[MetaOapg.properties.example_udid, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["example-udid", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ShieldLastActivityMap':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            TrustproviderURL = schemas.StrSchema
            __annotations__ = {
                "OrgName": OrgName,
                "First": First,
                "Last": Last,
                "Email": Email,
                "HashedPassword": HashedPassword,
                "RegisterKey": RegisterKey,
                "RegisterDate": RegisterDate,
                "Notifications": Notifications,
                "LastNotifyTime": LastNotifyTime,
                "RefreshToken": RefreshToken,
                "Profile": Profile,
                "OrgID": OrgID,
                "OrgRegisterDate": OrgRegisterDate,
                "CollectorActive": CollectorActive,
                "CIRegistered": CIRegistered,
                "RTRegistered": RTRegistered,
                "ImagesAfter": ImagesAfter,
                "MaxPerRepo": MaxPerRepo,
                "HistoryHours": HistoryHours,
                "IDPName": IDPName,
                "IDPConfig": IDPConfig,
                "IDPProto": IDPProto,
                "MDMName": MDMName,
                "MDMConfig": MDMConfig,
                "NoVPN": NoVPN,
                "DNSName": DNSName,
                "DNSConfig": DNSConfig,
                "LastUpdatedBy": LastUpdatedBy,
                "LastUpdatedAt": LastUpdatedAt,
                "AccessHistoryHours": AccessHistoryHours,
                "TrustConfig": TrustConfig,
                "IdentityHistoryHours": IdentityHistoryHours,
                "CloakExceptions": CloakExceptions,
                "RootCert": RootCert,
                "MDMDeployKey": MDMDeployKey,
                "MDMDeployOTPSkipRole": MDMDeployOTPSkipRole,
                "DeviceRegIDPName": DeviceRegIDPName,
                "DeviceRegIDPConfig": DeviceRegIDPConfig,
                "DeviceRegIDPProto": DeviceRegIDPProto,
                "PWLessConfig": PWLessConfig,
                "ID": ID,
                "IsLocalLoginEnabled": IsLocalLoginEnabled,
                "RefreshTokenForSAMLEnabled": RefreshTokenForSAMLEnabled,
                "SupportMessage": SupportMessage,
                "SupportLinkTitle": SupportLinkTitle,
                "SupportLinkUrl": SupportLinkUrl,
                "AccountType": AccountType,
                "HasRefreshToken": HasRefreshToken,
                "IDPType": IDPType,
                "ShieldLastActivity": ShieldLastActivity,
                "ShieldLastActivityMap": ShieldLastActivityMap,
                "TrustproviderURL": TrustproviderURL,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrgName"]) -> MetaOapg.properties.OrgName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["First"]) -> MetaOapg.properties.First: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Last"]) -> MetaOapg.properties.Last: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HashedPassword"]) -> MetaOapg.properties.HashedPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RegisterKey"]) -> MetaOapg.properties.RegisterKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RegisterDate"]) -> MetaOapg.properties.RegisterDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Notifications"]) -> MetaOapg.properties.Notifications: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastNotifyTime"]) -> MetaOapg.properties.LastNotifyTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RefreshToken"]) -> MetaOapg.properties.RefreshToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Profile"]) -> MetaOapg.properties.Profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrgID"]) -> MetaOapg.properties.OrgID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrgRegisterDate"]) -> MetaOapg.properties.OrgRegisterDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CollectorActive"]) -> MetaOapg.properties.CollectorActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CIRegistered"]) -> MetaOapg.properties.CIRegistered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RTRegistered"]) -> MetaOapg.properties.RTRegistered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ImagesAfter"]) -> MetaOapg.properties.ImagesAfter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MaxPerRepo"]) -> MetaOapg.properties.MaxPerRepo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HistoryHours"]) -> MetaOapg.properties.HistoryHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDPName"]) -> MetaOapg.properties.IDPName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDPConfig"]) -> MetaOapg.properties.IDPConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDPProto"]) -> MetaOapg.properties.IDPProto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MDMName"]) -> MetaOapg.properties.MDMName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MDMConfig"]) -> MetaOapg.properties.MDMConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NoVPN"]) -> MetaOapg.properties.NoVPN: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DNSName"]) -> MetaOapg.properties.DNSName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DNSConfig"]) -> MetaOapg.properties.DNSConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastUpdatedBy"]) -> MetaOapg.properties.LastUpdatedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> MetaOapg.properties.LastUpdatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccessHistoryHours"]) -> MetaOapg.properties.AccessHistoryHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrustConfig"]) -> MetaOapg.properties.TrustConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IdentityHistoryHours"]) -> MetaOapg.properties.IdentityHistoryHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CloakExceptions"]) -> MetaOapg.properties.CloakExceptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RootCert"]) -> MetaOapg.properties.RootCert: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MDMDeployKey"]) -> MetaOapg.properties.MDMDeployKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MDMDeployOTPSkipRole"]) -> MetaOapg.properties.MDMDeployOTPSkipRole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPName"]) -> MetaOapg.properties.DeviceRegIDPName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPConfig"]) -> MetaOapg.properties.DeviceRegIDPConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPProto"]) -> MetaOapg.properties.DeviceRegIDPProto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PWLessConfig"]) -> MetaOapg.properties.PWLessConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsLocalLoginEnabled"]) -> MetaOapg.properties.IsLocalLoginEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RefreshTokenForSAMLEnabled"]) -> MetaOapg.properties.RefreshTokenForSAMLEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupportMessage"]) -> MetaOapg.properties.SupportMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupportLinkTitle"]) -> MetaOapg.properties.SupportLinkTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupportLinkUrl"]) -> MetaOapg.properties.SupportLinkUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountType"]) -> MetaOapg.properties.AccountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HasRefreshToken"]) -> MetaOapg.properties.HasRefreshToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDPType"]) -> MetaOapg.properties.IDPType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShieldLastActivity"]) -> MetaOapg.properties.ShieldLastActivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShieldLastActivityMap"]) -> MetaOapg.properties.ShieldLastActivityMap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrustproviderURL"]) -> MetaOapg.properties.TrustproviderURL: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["OrgName", "First", "Last", "Email", "HashedPassword", "RegisterKey", "RegisterDate", "Notifications", "LastNotifyTime", "RefreshToken", "Profile", "OrgID", "OrgRegisterDate", "CollectorActive", "CIRegistered", "RTRegistered", "ImagesAfter", "MaxPerRepo", "HistoryHours", "IDPName", "IDPConfig", "IDPProto", "MDMName", "MDMConfig", "NoVPN", "DNSName", "DNSConfig", "LastUpdatedBy", "LastUpdatedAt", "AccessHistoryHours", "TrustConfig", "IdentityHistoryHours", "CloakExceptions", "RootCert", "MDMDeployKey", "MDMDeployOTPSkipRole", "DeviceRegIDPName", "DeviceRegIDPConfig", "DeviceRegIDPProto", "PWLessConfig", "ID", "IsLocalLoginEnabled", "RefreshTokenForSAMLEnabled", "SupportMessage", "SupportLinkTitle", "SupportLinkUrl", "AccountType", "HasRefreshToken", "IDPType", "ShieldLastActivity", "ShieldLastActivityMap", "TrustproviderURL", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrgName"]) -> typing.Union[MetaOapg.properties.OrgName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["First"]) -> typing.Union[MetaOapg.properties.First, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Last"]) -> typing.Union[MetaOapg.properties.Last, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HashedPassword"]) -> typing.Union[MetaOapg.properties.HashedPassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RegisterKey"]) -> typing.Union[MetaOapg.properties.RegisterKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RegisterDate"]) -> typing.Union[MetaOapg.properties.RegisterDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Notifications"]) -> typing.Union[MetaOapg.properties.Notifications, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastNotifyTime"]) -> typing.Union[MetaOapg.properties.LastNotifyTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RefreshToken"]) -> typing.Union[MetaOapg.properties.RefreshToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Profile"]) -> typing.Union[MetaOapg.properties.Profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrgID"]) -> typing.Union[MetaOapg.properties.OrgID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrgRegisterDate"]) -> typing.Union[MetaOapg.properties.OrgRegisterDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CollectorActive"]) -> typing.Union[MetaOapg.properties.CollectorActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CIRegistered"]) -> typing.Union[MetaOapg.properties.CIRegistered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RTRegistered"]) -> typing.Union[MetaOapg.properties.RTRegistered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ImagesAfter"]) -> typing.Union[MetaOapg.properties.ImagesAfter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MaxPerRepo"]) -> typing.Union[MetaOapg.properties.MaxPerRepo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HistoryHours"]) -> typing.Union[MetaOapg.properties.HistoryHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDPName"]) -> typing.Union[MetaOapg.properties.IDPName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDPConfig"]) -> typing.Union[MetaOapg.properties.IDPConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDPProto"]) -> typing.Union[MetaOapg.properties.IDPProto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MDMName"]) -> typing.Union[MetaOapg.properties.MDMName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MDMConfig"]) -> typing.Union[MetaOapg.properties.MDMConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NoVPN"]) -> typing.Union[MetaOapg.properties.NoVPN, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DNSName"]) -> typing.Union[MetaOapg.properties.DNSName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DNSConfig"]) -> typing.Union[MetaOapg.properties.DNSConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedBy"]) -> typing.Union[MetaOapg.properties.LastUpdatedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> typing.Union[MetaOapg.properties.LastUpdatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccessHistoryHours"]) -> typing.Union[MetaOapg.properties.AccessHistoryHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrustConfig"]) -> typing.Union[MetaOapg.properties.TrustConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IdentityHistoryHours"]) -> typing.Union[MetaOapg.properties.IdentityHistoryHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CloakExceptions"]) -> typing.Union[MetaOapg.properties.CloakExceptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RootCert"]) -> typing.Union[MetaOapg.properties.RootCert, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MDMDeployKey"]) -> typing.Union[MetaOapg.properties.MDMDeployKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MDMDeployOTPSkipRole"]) -> typing.Union[MetaOapg.properties.MDMDeployOTPSkipRole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPName"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPConfig"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPProto"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPProto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PWLessConfig"]) -> typing.Union[MetaOapg.properties.PWLessConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsLocalLoginEnabled"]) -> typing.Union[MetaOapg.properties.IsLocalLoginEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RefreshTokenForSAMLEnabled"]) -> typing.Union[MetaOapg.properties.RefreshTokenForSAMLEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupportMessage"]) -> typing.Union[MetaOapg.properties.SupportMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupportLinkTitle"]) -> typing.Union[MetaOapg.properties.SupportLinkTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupportLinkUrl"]) -> typing.Union[MetaOapg.properties.SupportLinkUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountType"]) -> typing.Union[MetaOapg.properties.AccountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HasRefreshToken"]) -> typing.Union[MetaOapg.properties.HasRefreshToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDPType"]) -> typing.Union[MetaOapg.properties.IDPType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShieldLastActivity"]) -> typing.Union[MetaOapg.properties.ShieldLastActivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShieldLastActivityMap"]) -> typing.Union[MetaOapg.properties.ShieldLastActivityMap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrustproviderURL"]) -> typing.Union[MetaOapg.properties.TrustproviderURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["OrgName", "First", "Last", "Email", "HashedPassword", "RegisterKey", "RegisterDate", "Notifications", "LastNotifyTime", "RefreshToken", "Profile", "OrgID", "OrgRegisterDate", "CollectorActive", "CIRegistered", "RTRegistered", "ImagesAfter", "MaxPerRepo", "HistoryHours", "IDPName", "IDPConfig", "IDPProto", "MDMName", "MDMConfig", "NoVPN", "DNSName", "DNSConfig", "LastUpdatedBy", "LastUpdatedAt", "AccessHistoryHours", "TrustConfig", "IdentityHistoryHours", "CloakExceptions", "RootCert", "MDMDeployKey", "MDMDeployOTPSkipRole", "DeviceRegIDPName", "DeviceRegIDPConfig", "DeviceRegIDPProto", "PWLessConfig", "ID", "IsLocalLoginEnabled", "RefreshTokenForSAMLEnabled", "SupportMessage", "SupportLinkTitle", "SupportLinkUrl", "AccountType", "HasRefreshToken", "IDPType", "ShieldLastActivity", "ShieldLastActivityMap", "TrustproviderURL", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        OrgName: typing.Union[MetaOapg.properties.OrgName, str, schemas.Unset] = schemas.unset,
        First: typing.Union[MetaOapg.properties.First, str, schemas.Unset] = schemas.unset,
        Last: typing.Union[MetaOapg.properties.Last, str, schemas.Unset] = schemas.unset,
        Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
        HashedPassword: typing.Union[MetaOapg.properties.HashedPassword, str, schemas.Unset] = schemas.unset,
        RegisterKey: typing.Union[MetaOapg.properties.RegisterKey, str, schemas.Unset] = schemas.unset,
        RegisterDate: typing.Union[MetaOapg.properties.RegisterDate, str, schemas.Unset] = schemas.unset,
        Notifications: typing.Union[MetaOapg.properties.Notifications, str, schemas.Unset] = schemas.unset,
        LastNotifyTime: typing.Union[MetaOapg.properties.LastNotifyTime, str, schemas.Unset] = schemas.unset,
        RefreshToken: typing.Union[MetaOapg.properties.RefreshToken, str, schemas.Unset] = schemas.unset,
        Profile: typing.Union[MetaOapg.properties.Profile, str, schemas.Unset] = schemas.unset,
        OrgID: typing.Union[MetaOapg.properties.OrgID, str, schemas.Unset] = schemas.unset,
        OrgRegisterDate: typing.Union[MetaOapg.properties.OrgRegisterDate, str, schemas.Unset] = schemas.unset,
        CollectorActive: typing.Union[MetaOapg.properties.CollectorActive, str, schemas.Unset] = schemas.unset,
        CIRegistered: typing.Union[MetaOapg.properties.CIRegistered, str, schemas.Unset] = schemas.unset,
        RTRegistered: typing.Union[MetaOapg.properties.RTRegistered, str, schemas.Unset] = schemas.unset,
        ImagesAfter: typing.Union[MetaOapg.properties.ImagesAfter, str, schemas.Unset] = schemas.unset,
        MaxPerRepo: typing.Union[MetaOapg.properties.MaxPerRepo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        HistoryHours: typing.Union[MetaOapg.properties.HistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        IDPName: typing.Union[MetaOapg.properties.IDPName, str, schemas.Unset] = schemas.unset,
        IDPConfig: typing.Union[MetaOapg.properties.IDPConfig, str, schemas.Unset] = schemas.unset,
        IDPProto: typing.Union[MetaOapg.properties.IDPProto, str, schemas.Unset] = schemas.unset,
        MDMName: typing.Union[MetaOapg.properties.MDMName, str, schemas.Unset] = schemas.unset,
        MDMConfig: typing.Union[MetaOapg.properties.MDMConfig, str, schemas.Unset] = schemas.unset,
        NoVPN: typing.Union[MetaOapg.properties.NoVPN, str, schemas.Unset] = schemas.unset,
        DNSName: typing.Union[MetaOapg.properties.DNSName, str, schemas.Unset] = schemas.unset,
        DNSConfig: typing.Union[MetaOapg.properties.DNSConfig, str, schemas.Unset] = schemas.unset,
        LastUpdatedBy: typing.Union[MetaOapg.properties.LastUpdatedBy, str, schemas.Unset] = schemas.unset,
        LastUpdatedAt: typing.Union[MetaOapg.properties.LastUpdatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AccessHistoryHours: typing.Union[MetaOapg.properties.AccessHistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        TrustConfig: typing.Union[MetaOapg.properties.TrustConfig, str, schemas.Unset] = schemas.unset,
        IdentityHistoryHours: typing.Union[MetaOapg.properties.IdentityHistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CloakExceptions: typing.Union[MetaOapg.properties.CloakExceptions, str, schemas.Unset] = schemas.unset,
        RootCert: typing.Union[MetaOapg.properties.RootCert, str, schemas.Unset] = schemas.unset,
        MDMDeployKey: typing.Union[MetaOapg.properties.MDMDeployKey, str, schemas.Unset] = schemas.unset,
        MDMDeployOTPSkipRole: typing.Union[MetaOapg.properties.MDMDeployOTPSkipRole, str, schemas.Unset] = schemas.unset,
        DeviceRegIDPName: typing.Union[MetaOapg.properties.DeviceRegIDPName, str, schemas.Unset] = schemas.unset,
        DeviceRegIDPConfig: typing.Union[MetaOapg.properties.DeviceRegIDPConfig, str, schemas.Unset] = schemas.unset,
        DeviceRegIDPProto: typing.Union[MetaOapg.properties.DeviceRegIDPProto, str, schemas.Unset] = schemas.unset,
        PWLessConfig: typing.Union[MetaOapg.properties.PWLessConfig, str, schemas.Unset] = schemas.unset,
        ID: typing.Union[MetaOapg.properties.ID, str, schemas.Unset] = schemas.unset,
        IsLocalLoginEnabled: typing.Union[MetaOapg.properties.IsLocalLoginEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        RefreshTokenForSAMLEnabled: typing.Union[MetaOapg.properties.RefreshTokenForSAMLEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        SupportMessage: typing.Union[MetaOapg.properties.SupportMessage, str, schemas.Unset] = schemas.unset,
        SupportLinkTitle: typing.Union[MetaOapg.properties.SupportLinkTitle, str, schemas.Unset] = schemas.unset,
        SupportLinkUrl: typing.Union[MetaOapg.properties.SupportLinkUrl, str, schemas.Unset] = schemas.unset,
        AccountType: typing.Union[MetaOapg.properties.AccountType, str, schemas.Unset] = schemas.unset,
        HasRefreshToken: typing.Union[MetaOapg.properties.HasRefreshToken, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        IDPType: typing.Union[MetaOapg.properties.IDPType, str, schemas.Unset] = schemas.unset,
        ShieldLastActivity: typing.Union[MetaOapg.properties.ShieldLastActivity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ShieldLastActivityMap: typing.Union[MetaOapg.properties.ShieldLastActivityMap, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        TrustproviderURL: typing.Union[MetaOapg.properties.TrustproviderURL, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            OrgName=OrgName,
            First=First,
            Last=Last,
            Email=Email,
            HashedPassword=HashedPassword,
            RegisterKey=RegisterKey,
            RegisterDate=RegisterDate,
            Notifications=Notifications,
            LastNotifyTime=LastNotifyTime,
            RefreshToken=RefreshToken,
            Profile=Profile,
            OrgID=OrgID,
            OrgRegisterDate=OrgRegisterDate,
            CollectorActive=CollectorActive,
            CIRegistered=CIRegistered,
            RTRegistered=RTRegistered,
            ImagesAfter=ImagesAfter,
            MaxPerRepo=MaxPerRepo,
            HistoryHours=HistoryHours,
            IDPName=IDPName,
            IDPConfig=IDPConfig,
            IDPProto=IDPProto,
            MDMName=MDMName,
            MDMConfig=MDMConfig,
            NoVPN=NoVPN,
            DNSName=DNSName,
            DNSConfig=DNSConfig,
            LastUpdatedBy=LastUpdatedBy,
            LastUpdatedAt=LastUpdatedAt,
            AccessHistoryHours=AccessHistoryHours,
            TrustConfig=TrustConfig,
            IdentityHistoryHours=IdentityHistoryHours,
            CloakExceptions=CloakExceptions,
            RootCert=RootCert,
            MDMDeployKey=MDMDeployKey,
            MDMDeployOTPSkipRole=MDMDeployOTPSkipRole,
            DeviceRegIDPName=DeviceRegIDPName,
            DeviceRegIDPConfig=DeviceRegIDPConfig,
            DeviceRegIDPProto=DeviceRegIDPProto,
            PWLessConfig=PWLessConfig,
            ID=ID,
            IsLocalLoginEnabled=IsLocalLoginEnabled,
            RefreshTokenForSAMLEnabled=RefreshTokenForSAMLEnabled,
            SupportMessage=SupportMessage,
            SupportLinkTitle=SupportLinkTitle,
            SupportLinkUrl=SupportLinkUrl,
            AccountType=AccountType,
            HasRefreshToken=HasRefreshToken,
            IDPType=IDPType,
            ShieldLastActivity=ShieldLastActivity,
            ShieldLastActivityMap=ShieldLastActivityMap,
            TrustproviderURL=TrustproviderURL,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_user_org_details_get_oapg(
        self: api_client.Api,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Get user&#x27;s org details
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
            request_header__2__content_type,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1UserOrgDetailsGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_user_org_details_get(
        self: BaseApi,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_user_org_details_get_oapg(
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_user_org_details_get_oapg(
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


