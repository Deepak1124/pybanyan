# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# header params
AuthorizationSchema = schemas.StrSchema


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class Configs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                UUID = schemas.StrSchema
                                OrgID = schemas.StrSchema
                                ShieldName = schemas.StrSchema
                                GroupType = schemas.StrSchema
                                ClusterMgrType = schemas.StrSchema
                                ClusterMgrIP = schemas.StrSchema
                                ShieldVersion = schemas.StrSchema
                                AutoUpgrade = schemas.StrSchema
                                OneTimeKey = schemas.StrSchema
                                OTKExpiryTime = schemas.StrSchema
                                PublicAddr = schemas.StrSchema
                                CACert = schemas.StrSchema
                                OTKEnabled = schemas.StrSchema
                                __annotations__ = {
                                    "UUID": UUID,
                                    "OrgID": OrgID,
                                    "ShieldName": ShieldName,
                                    "GroupType": GroupType,
                                    "ClusterMgrType": ClusterMgrType,
                                    "ClusterMgrIP": ClusterMgrIP,
                                    "ShieldVersion": ShieldVersion,
                                    "AutoUpgrade": AutoUpgrade,
                                    "OneTimeKey": OneTimeKey,
                                    "OTKExpiryTime": OTKExpiryTime,
                                    "PublicAddr": PublicAddr,
                                    "CACert": CACert,
                                    "OTKEnabled": OTKEnabled,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["OrgID"]) -> MetaOapg.properties.OrgID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ShieldName"]) -> MetaOapg.properties.ShieldName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["GroupType"]) -> MetaOapg.properties.GroupType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ClusterMgrType"]) -> MetaOapg.properties.ClusterMgrType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ClusterMgrIP"]) -> MetaOapg.properties.ClusterMgrIP: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ShieldVersion"]) -> MetaOapg.properties.ShieldVersion: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["AutoUpgrade"]) -> MetaOapg.properties.AutoUpgrade: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["OneTimeKey"]) -> MetaOapg.properties.OneTimeKey: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["OTKExpiryTime"]) -> MetaOapg.properties.OTKExpiryTime: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["PublicAddr"]) -> MetaOapg.properties.PublicAddr: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["CACert"]) -> MetaOapg.properties.CACert: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["OTKEnabled"]) -> MetaOapg.properties.OTKEnabled: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["UUID", "OrgID", "ShieldName", "GroupType", "ClusterMgrType", "ClusterMgrIP", "ShieldVersion", "AutoUpgrade", "OneTimeKey", "OTKExpiryTime", "PublicAddr", "CACert", "OTKEnabled", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["OrgID"]) -> typing.Union[MetaOapg.properties.OrgID, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ShieldName"]) -> typing.Union[MetaOapg.properties.ShieldName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["GroupType"]) -> typing.Union[MetaOapg.properties.GroupType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ClusterMgrType"]) -> typing.Union[MetaOapg.properties.ClusterMgrType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ClusterMgrIP"]) -> typing.Union[MetaOapg.properties.ClusterMgrIP, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ShieldVersion"]) -> typing.Union[MetaOapg.properties.ShieldVersion, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["AutoUpgrade"]) -> typing.Union[MetaOapg.properties.AutoUpgrade, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["OneTimeKey"]) -> typing.Union[MetaOapg.properties.OneTimeKey, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["OTKExpiryTime"]) -> typing.Union[MetaOapg.properties.OTKExpiryTime, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["PublicAddr"]) -> typing.Union[MetaOapg.properties.PublicAddr, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["CACert"]) -> typing.Union[MetaOapg.properties.CACert, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["OTKEnabled"]) -> typing.Union[MetaOapg.properties.OTKEnabled, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["UUID", "OrgID", "ShieldName", "GroupType", "ClusterMgrType", "ClusterMgrIP", "ShieldVersion", "AutoUpgrade", "OneTimeKey", "OTKExpiryTime", "PublicAddr", "CACert", "OTKEnabled", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                            OrgID: typing.Union[MetaOapg.properties.OrgID, str, schemas.Unset] = schemas.unset,
                            ShieldName: typing.Union[MetaOapg.properties.ShieldName, str, schemas.Unset] = schemas.unset,
                            GroupType: typing.Union[MetaOapg.properties.GroupType, str, schemas.Unset] = schemas.unset,
                            ClusterMgrType: typing.Union[MetaOapg.properties.ClusterMgrType, str, schemas.Unset] = schemas.unset,
                            ClusterMgrIP: typing.Union[MetaOapg.properties.ClusterMgrIP, str, schemas.Unset] = schemas.unset,
                            ShieldVersion: typing.Union[MetaOapg.properties.ShieldVersion, str, schemas.Unset] = schemas.unset,
                            AutoUpgrade: typing.Union[MetaOapg.properties.AutoUpgrade, str, schemas.Unset] = schemas.unset,
                            OneTimeKey: typing.Union[MetaOapg.properties.OneTimeKey, str, schemas.Unset] = schemas.unset,
                            OTKExpiryTime: typing.Union[MetaOapg.properties.OTKExpiryTime, str, schemas.Unset] = schemas.unset,
                            PublicAddr: typing.Union[MetaOapg.properties.PublicAddr, str, schemas.Unset] = schemas.unset,
                            CACert: typing.Union[MetaOapg.properties.CACert, str, schemas.Unset] = schemas.unset,
                            OTKEnabled: typing.Union[MetaOapg.properties.OTKEnabled, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                UUID=UUID,
                                OrgID=OrgID,
                                ShieldName=ShieldName,
                                GroupType=GroupType,
                                ClusterMgrType=ClusterMgrType,
                                ClusterMgrIP=ClusterMgrIP,
                                ShieldVersion=ShieldVersion,
                                AutoUpgrade=AutoUpgrade,
                                OneTimeKey=OneTimeKey,
                                OTKExpiryTime=OTKExpiryTime,
                                PublicAddr=PublicAddr,
                                CACert=CACert,
                                OTKEnabled=OTKEnabled,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Configs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class ShieldLastActivitiesMap(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class _03d7837b_ff2a_4b12_84b0_22377863d0d4(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    InsertTime = schemas.StrSchema
                                    Status = schemas.StrSchema
                                    UUID = schemas.StrSchema
                                    __annotations__ = {
                                        "InsertTime": InsertTime,
                                        "Status": Status,
                                        "UUID": UUID,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["InsertTime"]) -> MetaOapg.properties.InsertTime: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["InsertTime"]) -> typing.Union[MetaOapg.properties.InsertTime, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                InsertTime: typing.Union[MetaOapg.properties.InsertTime, str, schemas.Unset] = schemas.unset,
                                Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> '_03d7837b_ff2a_4b12_84b0_22377863d0d4':
                                return super().__new__(
                                    cls,
                                    *args,
                                    InsertTime=InsertTime,
                                    Status=Status,
                                    UUID=UUID,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class _110ca7a3_cfda_4c04_81f9_dc47a537dfd3(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    InsertTime = schemas.StrSchema
                                    Status = schemas.StrSchema
                                    UUID = schemas.StrSchema
                                    __annotations__ = {
                                        "InsertTime": InsertTime,
                                        "Status": Status,
                                        "UUID": UUID,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["InsertTime"]) -> MetaOapg.properties.InsertTime: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["InsertTime"]) -> typing.Union[MetaOapg.properties.InsertTime, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                InsertTime: typing.Union[MetaOapg.properties.InsertTime, str, schemas.Unset] = schemas.unset,
                                Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> '_110ca7a3_cfda_4c04_81f9_dc47a537dfd3':
                                return super().__new__(
                                    cls,
                                    *args,
                                    InsertTime=InsertTime,
                                    Status=Status,
                                    UUID=UUID,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class _35651943_b9c8_423d_9ab9_c472774b1271(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    InsertTime = schemas.StrSchema
                                    Status = schemas.StrSchema
                                    UUID = schemas.StrSchema
                                    __annotations__ = {
                                        "InsertTime": InsertTime,
                                        "Status": Status,
                                        "UUID": UUID,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["InsertTime"]) -> MetaOapg.properties.InsertTime: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["InsertTime"]) -> typing.Union[MetaOapg.properties.InsertTime, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                InsertTime: typing.Union[MetaOapg.properties.InsertTime, str, schemas.Unset] = schemas.unset,
                                Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> '_35651943_b9c8_423d_9ab9_c472774b1271':
                                return super().__new__(
                                    cls,
                                    *args,
                                    InsertTime=InsertTime,
                                    Status=Status,
                                    UUID=UUID,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class _8423c253_3103_40e7_b74c_eeb0068a0085(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    InsertTime = schemas.StrSchema
                                    Status = schemas.StrSchema
                                    UUID = schemas.StrSchema
                                    __annotations__ = {
                                        "InsertTime": InsertTime,
                                        "Status": Status,
                                        "UUID": UUID,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["InsertTime"]) -> MetaOapg.properties.InsertTime: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["InsertTime"]) -> typing.Union[MetaOapg.properties.InsertTime, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                InsertTime: typing.Union[MetaOapg.properties.InsertTime, str, schemas.Unset] = schemas.unset,
                                Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> '_8423c253_3103_40e7_b74c_eeb0068a0085':
                                return super().__new__(
                                    cls,
                                    *args,
                                    InsertTime=InsertTime,
                                    Status=Status,
                                    UUID=UUID,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class _95f81bb9_49a0_4b79_b991_6199ecb85e6c(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    InsertTime = schemas.StrSchema
                                    Status = schemas.StrSchema
                                    UUID = schemas.StrSchema
                                    __annotations__ = {
                                        "InsertTime": InsertTime,
                                        "Status": Status,
                                        "UUID": UUID,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["InsertTime"]) -> MetaOapg.properties.InsertTime: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["InsertTime"]) -> typing.Union[MetaOapg.properties.InsertTime, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                InsertTime: typing.Union[MetaOapg.properties.InsertTime, str, schemas.Unset] = schemas.unset,
                                Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> '_95f81bb9_49a0_4b79_b991_6199ecb85e6c':
                                return super().__new__(
                                    cls,
                                    *args,
                                    InsertTime=InsertTime,
                                    Status=Status,
                                    UUID=UUID,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class f61a5278_c1f7_47dd_8382_1d068f5b321f(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    InsertTime = schemas.StrSchema
                                    Status = schemas.StrSchema
                                    UUID = schemas.StrSchema
                                    __annotations__ = {
                                        "InsertTime": InsertTime,
                                        "Status": Status,
                                        "UUID": UUID,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["InsertTime"]) -> MetaOapg.properties.InsertTime: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["UUID"]) -> MetaOapg.properties.UUID: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["InsertTime"]) -> typing.Union[MetaOapg.properties.InsertTime, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["UUID"]) -> typing.Union[MetaOapg.properties.UUID, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InsertTime", "Status", "UUID", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                InsertTime: typing.Union[MetaOapg.properties.InsertTime, str, schemas.Unset] = schemas.unset,
                                Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
                                UUID: typing.Union[MetaOapg.properties.UUID, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'f61a5278_c1f7_47dd_8382_1d068f5b321f':
                                return super().__new__(
                                    cls,
                                    *args,
                                    InsertTime=InsertTime,
                                    Status=Status,
                                    UUID=UUID,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "03d7837b-ff2a-4b12-84b0-22377863d0d4": _03d7837b_ff2a_4b12_84b0_22377863d0d4,
                            "110ca7a3-cfda-4c04-81f9-dc47a537dfd3": _110ca7a3_cfda_4c04_81f9_dc47a537dfd3,
                            "35651943-b9c8-423d-9ab9-c472774b1271": _35651943_b9c8_423d_9ab9_c472774b1271,
                            "8423c253-3103-40e7-b74c-eeb0068a0085": _8423c253_3103_40e7_b74c_eeb0068a0085,
                            "95f81bb9-49a0-4b79-b991-6199ecb85e6c": _95f81bb9_49a0_4b79_b991_6199ecb85e6c,
                            "f61a5278-c1f7-47dd-8382-1d068f5b321f": f61a5278_c1f7_47dd_8382_1d068f5b321f,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["03d7837b-ff2a-4b12-84b0-22377863d0d4"]) -> MetaOapg.properties._03d7837b_ff2a_4b12_84b0_22377863d0d4: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["110ca7a3-cfda-4c04-81f9-dc47a537dfd3"]) -> MetaOapg.properties._110ca7a3_cfda_4c04_81f9_dc47a537dfd3: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["35651943-b9c8-423d-9ab9-c472774b1271"]) -> MetaOapg.properties._35651943_b9c8_423d_9ab9_c472774b1271: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["8423c253-3103-40e7-b74c-eeb0068a0085"]) -> MetaOapg.properties._8423c253_3103_40e7_b74c_eeb0068a0085: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["95f81bb9-49a0-4b79-b991-6199ecb85e6c"]) -> MetaOapg.properties._95f81bb9_49a0_4b79_b991_6199ecb85e6c: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["f61a5278-c1f7-47dd-8382-1d068f5b321f"]) -> MetaOapg.properties.f61a5278_c1f7_47dd_8382_1d068f5b321f: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["03d7837b-ff2a-4b12-84b0-22377863d0d4", "110ca7a3-cfda-4c04-81f9-dc47a537dfd3", "35651943-b9c8-423d-9ab9-c472774b1271", "8423c253-3103-40e7-b74c-eeb0068a0085", "95f81bb9-49a0-4b79-b991-6199ecb85e6c", "f61a5278-c1f7-47dd-8382-1d068f5b321f", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["03d7837b-ff2a-4b12-84b0-22377863d0d4"]) -> typing.Union[MetaOapg.properties._03d7837b_ff2a_4b12_84b0_22377863d0d4, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["110ca7a3-cfda-4c04-81f9-dc47a537dfd3"]) -> typing.Union[MetaOapg.properties._110ca7a3_cfda_4c04_81f9_dc47a537dfd3, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["35651943-b9c8-423d-9ab9-c472774b1271"]) -> typing.Union[MetaOapg.properties._35651943_b9c8_423d_9ab9_c472774b1271, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["8423c253-3103-40e7-b74c-eeb0068a0085"]) -> typing.Union[MetaOapg.properties._8423c253_3103_40e7_b74c_eeb0068a0085, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["95f81bb9-49a0-4b79-b991-6199ecb85e6c"]) -> typing.Union[MetaOapg.properties._95f81bb9_49a0_4b79_b991_6199ecb85e6c, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["f61a5278-c1f7-47dd-8382-1d068f5b321f"]) -> typing.Union[MetaOapg.properties.f61a5278_c1f7_47dd_8382_1d068f5b321f, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["03d7837b-ff2a-4b12-84b0-22377863d0d4", "110ca7a3-cfda-4c04-81f9-dc47a537dfd3", "35651943-b9c8-423d-9ab9-c472774b1271", "8423c253-3103-40e7-b74c-eeb0068a0085", "95f81bb9-49a0-4b79-b991-6199ecb85e6c", "f61a5278-c1f7-47dd-8382-1d068f5b321f", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ShieldLastActivitiesMap':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class NetagentHostInfoMap(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class _03d7837b_ff2a_4b12_84b0_22377863d0d4(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            Hostname = schemas.StrSchema
                                            
                                            
                                            class IPs(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'IPs':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            Version = schemas.StrSchema
                                            Visibility = schemas.IntSchema
                                            CIDRs = schemas.StrSchema
                                            
                                            
                                            class HostTags(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        com_banyanops_hosttag_base = schemas.StrSchema
                                                        com_banyanops_hosttag_host = schemas.StrSchema
                                                        com_banyanops_hosttag_size = schemas.StrSchema
                                                        __annotations__ = {
                                                            "com.banyanops.hosttag.base": com_banyanops_hosttag_base,
                                                            "com.banyanops.hosttag.host": com_banyanops_hosttag_host,
                                                            "com.banyanops.hosttag.size": com_banyanops_hosttag_size,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.base"]) -> MetaOapg.properties.com_banyanops_hosttag_base: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.host"]) -> MetaOapg.properties.com_banyanops_hosttag_host: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.size"]) -> MetaOapg.properties.com_banyanops_hosttag_size: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["com.banyanops.hosttag.base", "com.banyanops.hosttag.host", "com.banyanops.hosttag.size", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.base"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_base, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.host"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_host, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.size"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_size, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["com.banyanops.hosttag.base", "com.banyanops.hosttag.host", "com.banyanops.hosttag.size", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'HostTags':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            __annotations__ = {
                                                "Hostname": Hostname,
                                                "IPs": IPs,
                                                "Version": Version,
                                                "Visibility": Visibility,
                                                "CIDRs": CIDRs,
                                                "HostTags": HostTags,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["Hostname"]) -> MetaOapg.properties.Hostname: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["IPs"]) -> MetaOapg.properties.IPs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["Version"]) -> MetaOapg.properties.Version: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["Visibility"]) -> MetaOapg.properties.Visibility: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["CIDRs"]) -> MetaOapg.properties.CIDRs: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["HostTags"]) -> MetaOapg.properties.HostTags: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Hostname", "IPs", "Version", "Visibility", "CIDRs", "HostTags", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["Hostname"]) -> typing.Union[MetaOapg.properties.Hostname, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["IPs"]) -> typing.Union[MetaOapg.properties.IPs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["Version"]) -> typing.Union[MetaOapg.properties.Version, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["Visibility"]) -> typing.Union[MetaOapg.properties.Visibility, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["CIDRs"]) -> typing.Union[MetaOapg.properties.CIDRs, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["HostTags"]) -> typing.Union[MetaOapg.properties.HostTags, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Hostname", "IPs", "Version", "Visibility", "CIDRs", "HostTags", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        Hostname: typing.Union[MetaOapg.properties.Hostname, str, schemas.Unset] = schemas.unset,
                                        IPs: typing.Union[MetaOapg.properties.IPs, list, tuple, schemas.Unset] = schemas.unset,
                                        Version: typing.Union[MetaOapg.properties.Version, str, schemas.Unset] = schemas.unset,
                                        Visibility: typing.Union[MetaOapg.properties.Visibility, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        CIDRs: typing.Union[MetaOapg.properties.CIDRs, str, schemas.Unset] = schemas.unset,
                                        HostTags: typing.Union[MetaOapg.properties.HostTags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            Hostname=Hostname,
                                            IPs=IPs,
                                            Version=Version,
                                            Visibility=Visibility,
                                            CIDRs=CIDRs,
                                            HostTags=HostTags,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> '_03d7837b_ff2a_4b12_84b0_22377863d0d4':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "03d7837b-ff2a-4b12-84b0-22377863d0d4": _03d7837b_ff2a_4b12_84b0_22377863d0d4,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["03d7837b-ff2a-4b12-84b0-22377863d0d4"]) -> MetaOapg.properties._03d7837b_ff2a_4b12_84b0_22377863d0d4: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["03d7837b-ff2a-4b12-84b0-22377863d0d4", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["03d7837b-ff2a-4b12-84b0-22377863d0d4"]) -> typing.Union[MetaOapg.properties._03d7837b_ff2a_4b12_84b0_22377863d0d4, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["03d7837b-ff2a-4b12-84b0-22377863d0d4", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'NetagentHostInfoMap':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "Configs": Configs,
                "ShieldLastActivitiesMap": ShieldLastActivitiesMap,
                "NetagentHostInfoMap": NetagentHostInfoMap,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Configs"]) -> MetaOapg.properties.Configs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShieldLastActivitiesMap"]) -> MetaOapg.properties.ShieldLastActivitiesMap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NetagentHostInfoMap"]) -> MetaOapg.properties.NetagentHostInfoMap: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Configs", "ShieldLastActivitiesMap", "NetagentHostInfoMap", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Configs"]) -> typing.Union[MetaOapg.properties.Configs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShieldLastActivitiesMap"]) -> typing.Union[MetaOapg.properties.ShieldLastActivitiesMap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NetagentHostInfoMap"]) -> typing.Union[MetaOapg.properties.NetagentHostInfoMap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Configs", "ShieldLastActivitiesMap", "NetagentHostInfoMap", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Configs: typing.Union[MetaOapg.properties.Configs, list, tuple, schemas.Unset] = schemas.unset,
        ShieldLastActivitiesMap: typing.Union[MetaOapg.properties.ShieldLastActivitiesMap, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        NetagentHostInfoMap: typing.Union[MetaOapg.properties.NetagentHostInfoMap, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            Configs=Configs,
            ShieldLastActivitiesMap=ShieldLastActivitiesMap,
            NetagentHostInfoMap=NetagentHostInfoMap,
            _configuration=_configuration,
            **kwargs,
        )
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_shield_config_get_oapg(
        self: api_client.Api,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Get all details about all clusters registered with an Org
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1ShieldConfigGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_shield_config_get(
        self: BaseApi,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_shield_config_get_oapg(
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_shield_config_get_oapg(
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


