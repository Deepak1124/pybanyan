# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# header params
AuthorizationSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
)
# path params
AccessTierIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'access_tier_id': typing.Union[AccessTierIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_access_tier_id = api_client.PathParameter(
    name="access_tier_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AccessTierIdSchema,
    required=True,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            kind = schemas.StrSchema
            api_version = schemas.StrSchema
            type = schemas.StrSchema
            metadata = schemas.IntSchema
            
            
            class spec(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class miscellaneous(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    public_ip_source = schemas.StrSchema
                                    __annotations__ = {
                                        "public_ip_source": public_ip_source,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["public_ip_source"]) -> MetaOapg.properties.public_ip_source: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["public_ip_source", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["public_ip_source"]) -> typing.Union[MetaOapg.properties.public_ip_source, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["public_ip_source", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                public_ip_source: typing.Union[MetaOapg.properties.public_ip_source, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'miscellaneous':
                                return super().__new__(
                                    cls,
                                    *args,
                                    public_ip_source=public_ip_source,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class debugging(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    use_rsa = schemas.BoolSchema
                                    __annotations__ = {
                                        "use_rsa": use_rsa,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["use_rsa"]) -> MetaOapg.properties.use_rsa: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["use_rsa", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["use_rsa"]) -> typing.Union[MetaOapg.properties.use_rsa, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["use_rsa", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                use_rsa: typing.Union[MetaOapg.properties.use_rsa, bool, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'debugging':
                                return super().__new__(
                                    cls,
                                    *args,
                                    use_rsa=use_rsa,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "miscellaneous": miscellaneous,
                            "debugging": debugging,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["miscellaneous"]) -> MetaOapg.properties.miscellaneous: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["debugging"]) -> MetaOapg.properties.debugging: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["miscellaneous", "debugging", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["miscellaneous"]) -> typing.Union[MetaOapg.properties.miscellaneous, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["debugging"]) -> typing.Union[MetaOapg.properties.debugging, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["miscellaneous", "debugging", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    miscellaneous: typing.Union[MetaOapg.properties.miscellaneous, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    debugging: typing.Union[MetaOapg.properties.debugging, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'spec':
                    return super().__new__(
                        cls,
                        *args,
                        miscellaneous=miscellaneous,
                        debugging=debugging,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "kind": kind,
                "api_version": api_version,
                "type": type,
                "metadata": metadata,
                "spec": spec,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["api_version"]) -> MetaOapg.properties.api_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spec"]) -> MetaOapg.properties.spec: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kind", "api_version", "type", "metadata", "spec", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["api_version"]) -> typing.Union[MetaOapg.properties.api_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spec"]) -> typing.Union[MetaOapg.properties.spec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kind", "api_version", "type", "metadata", "spec", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        api_version: typing.Union[MetaOapg.properties.api_version, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        spec: typing.Union[MetaOapg.properties.spec, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            kind=kind,
            api_version=api_version,
            type=type,
            metadata=metadata,
            spec=spec,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            request_id = schemas.StrSchema
            error_code = schemas.IntSchema
            error_description = schemas.StrSchema
            
            
            class data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class base(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    shield_address = schemas.StrSchema
                                    site_address = schemas.StrSchema
                                    __annotations__ = {
                                        "shield_address": shield_address,
                                        "site_address": site_address,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["shield_address"]) -> MetaOapg.properties.shield_address: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["site_address"]) -> MetaOapg.properties.site_address: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["shield_address", "site_address", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["shield_address"]) -> typing.Union[MetaOapg.properties.shield_address, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["site_address"]) -> typing.Union[MetaOapg.properties.site_address, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["shield_address", "site_address", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                shield_address: typing.Union[MetaOapg.properties.shield_address, str, schemas.Unset] = schemas.unset,
                                site_address: typing.Union[MetaOapg.properties.site_address, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'base':
                                return super().__new__(
                                    cls,
                                    *args,
                                    shield_address=shield_address,
                                    site_address=site_address,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class logging(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    console_log_level = schemas.StrSchema
                                    file_log_level = schemas.StrSchema
                                    file_log = schemas.IntSchema
                                    log_num = schemas.IntSchema
                                    log_size = schemas.IntSchema
                                    statsd = schemas.IntSchema
                                    statsd_address = schemas.StrSchema
                                    __annotations__ = {
                                        "console_log_level": console_log_level,
                                        "file_log_level": file_log_level,
                                        "file_log": file_log,
                                        "log_num": log_num,
                                        "log_size": log_size,
                                        "statsd": statsd,
                                        "statsd_address": statsd_address,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["console_log_level"]) -> MetaOapg.properties.console_log_level: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["file_log_level"]) -> MetaOapg.properties.file_log_level: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["file_log"]) -> MetaOapg.properties.file_log: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["log_num"]) -> MetaOapg.properties.log_num: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["log_size"]) -> MetaOapg.properties.log_size: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["statsd"]) -> MetaOapg.properties.statsd: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["statsd_address"]) -> MetaOapg.properties.statsd_address: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["console_log_level", "file_log_level", "file_log", "log_num", "log_size", "statsd", "statsd_address", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["console_log_level"]) -> typing.Union[MetaOapg.properties.console_log_level, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["file_log_level"]) -> typing.Union[MetaOapg.properties.file_log_level, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["file_log"]) -> typing.Union[MetaOapg.properties.file_log, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["log_num"]) -> typing.Union[MetaOapg.properties.log_num, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["log_size"]) -> typing.Union[MetaOapg.properties.log_size, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["statsd"]) -> typing.Union[MetaOapg.properties.statsd, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["statsd_address"]) -> typing.Union[MetaOapg.properties.statsd_address, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["console_log_level", "file_log_level", "file_log", "log_num", "log_size", "statsd", "statsd_address", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                console_log_level: typing.Union[MetaOapg.properties.console_log_level, str, schemas.Unset] = schemas.unset,
                                file_log_level: typing.Union[MetaOapg.properties.file_log_level, str, schemas.Unset] = schemas.unset,
                                file_log: typing.Union[MetaOapg.properties.file_log, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                log_num: typing.Union[MetaOapg.properties.log_num, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                log_size: typing.Union[MetaOapg.properties.log_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                statsd: typing.Union[MetaOapg.properties.statsd, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                statsd_address: typing.Union[MetaOapg.properties.statsd_address, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'logging':
                                return super().__new__(
                                    cls,
                                    *args,
                                    console_log_level=console_log_level,
                                    file_log_level=file_log_level,
                                    file_log=file_log,
                                    log_num=log_num,
                                    log_size=log_size,
                                    statsd=statsd,
                                    statsd_address=statsd_address,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class events(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    access_event_credits_limiting = schemas.IntSchema
                                    access_event_credits_per_interval = schemas.IntSchema
                                    access_event_credits_interval = schemas.IntSchema
                                    access_event_credits_max = schemas.IntSchema
                                    access_event_key_limiting = schemas.IntSchema
                                    access_event_key_expiration = schemas.IntSchema
                                    __annotations__ = {
                                        "access_event_credits_limiting": access_event_credits_limiting,
                                        "access_event_credits_per_interval": access_event_credits_per_interval,
                                        "access_event_credits_interval": access_event_credits_interval,
                                        "access_event_credits_max": access_event_credits_max,
                                        "access_event_key_limiting": access_event_key_limiting,
                                        "access_event_key_expiration": access_event_key_expiration,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["access_event_credits_limiting"]) -> MetaOapg.properties.access_event_credits_limiting: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["access_event_credits_per_interval"]) -> MetaOapg.properties.access_event_credits_per_interval: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["access_event_credits_interval"]) -> MetaOapg.properties.access_event_credits_interval: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["access_event_credits_max"]) -> MetaOapg.properties.access_event_credits_max: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["access_event_key_limiting"]) -> MetaOapg.properties.access_event_key_limiting: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["access_event_key_expiration"]) -> MetaOapg.properties.access_event_key_expiration: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_event_credits_limiting", "access_event_credits_per_interval", "access_event_credits_interval", "access_event_credits_max", "access_event_key_limiting", "access_event_key_expiration", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["access_event_credits_limiting"]) -> typing.Union[MetaOapg.properties.access_event_credits_limiting, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["access_event_credits_per_interval"]) -> typing.Union[MetaOapg.properties.access_event_credits_per_interval, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["access_event_credits_interval"]) -> typing.Union[MetaOapg.properties.access_event_credits_interval, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["access_event_credits_max"]) -> typing.Union[MetaOapg.properties.access_event_credits_max, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["access_event_key_limiting"]) -> typing.Union[MetaOapg.properties.access_event_key_limiting, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["access_event_key_expiration"]) -> typing.Union[MetaOapg.properties.access_event_key_expiration, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_event_credits_limiting", "access_event_credits_per_interval", "access_event_credits_interval", "access_event_credits_max", "access_event_key_limiting", "access_event_key_expiration", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                access_event_credits_limiting: typing.Union[MetaOapg.properties.access_event_credits_limiting, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                access_event_credits_per_interval: typing.Union[MetaOapg.properties.access_event_credits_per_interval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                access_event_credits_interval: typing.Union[MetaOapg.properties.access_event_credits_interval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                access_event_credits_max: typing.Union[MetaOapg.properties.access_event_credits_max, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                access_event_key_limiting: typing.Union[MetaOapg.properties.access_event_key_limiting, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                access_event_key_expiration: typing.Union[MetaOapg.properties.access_event_key_expiration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'events':
                                return super().__new__(
                                    cls,
                                    *args,
                                    access_event_credits_limiting=access_event_credits_limiting,
                                    access_event_credits_per_interval=access_event_credits_per_interval,
                                    access_event_credits_interval=access_event_credits_interval,
                                    access_event_credits_max=access_event_credits_max,
                                    access_event_key_limiting=access_event_key_limiting,
                                    access_event_key_expiration=access_event_key_expiration,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class hosted_web_services(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    redirect_to_https = schemas.IntSchema
                                    groups_by_userinfo = schemas.IntSchema
                                    forward_trust_cookie = schemas.BoolSchema
                                    __annotations__ = {
                                        "redirect_to_https": redirect_to_https,
                                        "groups_by_userinfo": groups_by_userinfo,
                                        "forward_trust_cookie": forward_trust_cookie,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["redirect_to_https"]) -> MetaOapg.properties.redirect_to_https: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["groups_by_userinfo"]) -> MetaOapg.properties.groups_by_userinfo: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["forward_trust_cookie"]) -> MetaOapg.properties.forward_trust_cookie: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["redirect_to_https", "groups_by_userinfo", "forward_trust_cookie", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["redirect_to_https"]) -> typing.Union[MetaOapg.properties.redirect_to_https, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["groups_by_userinfo"]) -> typing.Union[MetaOapg.properties.groups_by_userinfo, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["forward_trust_cookie"]) -> typing.Union[MetaOapg.properties.forward_trust_cookie, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["redirect_to_https", "groups_by_userinfo", "forward_trust_cookie", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                redirect_to_https: typing.Union[MetaOapg.properties.redirect_to_https, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                groups_by_userinfo: typing.Union[MetaOapg.properties.groups_by_userinfo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                forward_trust_cookie: typing.Union[MetaOapg.properties.forward_trust_cookie, bool, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'hosted_web_services':
                                return super().__new__(
                                    cls,
                                    *args,
                                    redirect_to_https=redirect_to_https,
                                    groups_by_userinfo=groups_by_userinfo,
                                    forward_trust_cookie=forward_trust_cookie,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class infrastructure_services(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    http_connect = schemas.IntSchema
                                    maximum_session_timeout = schemas.IntSchema
                                    __annotations__ = {
                                        "http_connect": http_connect,
                                        "maximum_session_timeout": maximum_session_timeout,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["http_connect"]) -> MetaOapg.properties.http_connect: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["maximum_session_timeout"]) -> MetaOapg.properties.maximum_session_timeout: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["http_connect", "maximum_session_timeout", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["http_connect"]) -> typing.Union[MetaOapg.properties.http_connect, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["maximum_session_timeout"]) -> typing.Union[MetaOapg.properties.maximum_session_timeout, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["http_connect", "maximum_session_timeout", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                http_connect: typing.Union[MetaOapg.properties.http_connect, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                maximum_session_timeout: typing.Union[MetaOapg.properties.maximum_session_timeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'infrastructure_services':
                                return super().__new__(
                                    cls,
                                    *args,
                                    http_connect=http_connect,
                                    maximum_session_timeout=maximum_session_timeout,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class denial_of_service_protection(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    bad_actor = schemas.IntSchema
                                    infraction_count = schemas.IntSchema
                                    sentence_time = schemas.IntSchema
                                    __annotations__ = {
                                        "bad_actor": bad_actor,
                                        "infraction_count": infraction_count,
                                        "sentence_time": sentence_time,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["bad_actor"]) -> MetaOapg.properties.bad_actor: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["infraction_count"]) -> MetaOapg.properties.infraction_count: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["sentence_time"]) -> MetaOapg.properties.sentence_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["bad_actor", "infraction_count", "sentence_time", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["bad_actor"]) -> typing.Union[MetaOapg.properties.bad_actor, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["infraction_count"]) -> typing.Union[MetaOapg.properties.infraction_count, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["sentence_time"]) -> typing.Union[MetaOapg.properties.sentence_time, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bad_actor", "infraction_count", "sentence_time", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                bad_actor: typing.Union[MetaOapg.properties.bad_actor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                infraction_count: typing.Union[MetaOapg.properties.infraction_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                sentence_time: typing.Union[MetaOapg.properties.sentence_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'denial_of_service_protection':
                                return super().__new__(
                                    cls,
                                    *args,
                                    bad_actor=bad_actor,
                                    infraction_count=infraction_count,
                                    sentence_time=sentence_time,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class miscellaneous(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    secure_bootstrap = schemas.IntSchema
                                    access_tier = schemas.IntSchema
                                    site_domain_names = schemas.StrSchema
                                    listen_port = schemas.IntSchema
                                    listen_port_health = schemas.IntSchema
                                    site_autoscale = schemas.IntSchema
                                    public_ip_source = schemas.StrSchema
                                    cpu_limit = schemas.IntSchema
                                    __annotations__ = {
                                        "secure_bootstrap": secure_bootstrap,
                                        "access_tier": access_tier,
                                        "site_domain_names": site_domain_names,
                                        "listen_port": listen_port,
                                        "listen_port_health": listen_port_health,
                                        "site_autoscale": site_autoscale,
                                        "public_ip_source": public_ip_source,
                                        "cpu_limit": cpu_limit,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["secure_bootstrap"]) -> MetaOapg.properties.secure_bootstrap: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["access_tier"]) -> MetaOapg.properties.access_tier: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["site_domain_names"]) -> MetaOapg.properties.site_domain_names: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["listen_port"]) -> MetaOapg.properties.listen_port: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["listen_port_health"]) -> MetaOapg.properties.listen_port_health: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["site_autoscale"]) -> MetaOapg.properties.site_autoscale: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["public_ip_source"]) -> MetaOapg.properties.public_ip_source: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["cpu_limit"]) -> MetaOapg.properties.cpu_limit: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["secure_bootstrap", "access_tier", "site_domain_names", "listen_port", "listen_port_health", "site_autoscale", "public_ip_source", "cpu_limit", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["secure_bootstrap"]) -> typing.Union[MetaOapg.properties.secure_bootstrap, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["access_tier"]) -> typing.Union[MetaOapg.properties.access_tier, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["site_domain_names"]) -> typing.Union[MetaOapg.properties.site_domain_names, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["listen_port"]) -> typing.Union[MetaOapg.properties.listen_port, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["listen_port_health"]) -> typing.Union[MetaOapg.properties.listen_port_health, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["site_autoscale"]) -> typing.Union[MetaOapg.properties.site_autoscale, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["public_ip_source"]) -> typing.Union[MetaOapg.properties.public_ip_source, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["cpu_limit"]) -> typing.Union[MetaOapg.properties.cpu_limit, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["secure_bootstrap", "access_tier", "site_domain_names", "listen_port", "listen_port_health", "site_autoscale", "public_ip_source", "cpu_limit", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                secure_bootstrap: typing.Union[MetaOapg.properties.secure_bootstrap, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                access_tier: typing.Union[MetaOapg.properties.access_tier, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                site_domain_names: typing.Union[MetaOapg.properties.site_domain_names, str, schemas.Unset] = schemas.unset,
                                listen_port: typing.Union[MetaOapg.properties.listen_port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                listen_port_health: typing.Union[MetaOapg.properties.listen_port_health, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                site_autoscale: typing.Union[MetaOapg.properties.site_autoscale, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                public_ip_source: typing.Union[MetaOapg.properties.public_ip_source, str, schemas.Unset] = schemas.unset,
                                cpu_limit: typing.Union[MetaOapg.properties.cpu_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'miscellaneous':
                                return super().__new__(
                                    cls,
                                    *args,
                                    secure_bootstrap=secure_bootstrap,
                                    access_tier=access_tier,
                                    site_domain_names=site_domain_names,
                                    listen_port=listen_port,
                                    listen_port_health=listen_port_health,
                                    site_autoscale=site_autoscale,
                                    public_ip_source=public_ip_source,
                                    cpu_limit=cpu_limit,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class debugging(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    http_backend_log = schemas.IntSchema
                                    visibility_only = schemas.IntSchema
                                    shield_timeout = schemas.IntSchema
                                    keep_alive = schemas.IntSchema
                                    keep_idle = schemas.IntSchema
                                    keep_interval = schemas.IntSchema
                                    keep_count = schemas.IntSchema
                                    cpu_profile = schemas.StrSchema
                                    mem_profile = schemas.IntSchema
                                    host_only = schemas.IntSchema
                                    disable_docker = schemas.IntSchema
                                    send_zeros = schemas.IntSchema
                                    period = schemas.IntSchema
                                    request_level_events = schemas.IntSchema
                                    address_transparency = schemas.IntSchema
                                    use_rsa = schemas.IntSchema
                                    full_server_cert_chain = schemas.IntSchema
                                    code_flow = schemas.IntSchema
                                    inactivity_timeout = schemas.IntSchema
                                    client_timeout = schemas.IntSchema
                                    __annotations__ = {
                                        "http_backend_log": http_backend_log,
                                        "visibility_only": visibility_only,
                                        "shield_timeout": shield_timeout,
                                        "keep_alive": keep_alive,
                                        "keep_idle": keep_idle,
                                        "keep_interval": keep_interval,
                                        "keep_count": keep_count,
                                        "cpu_profile": cpu_profile,
                                        "mem_profile": mem_profile,
                                        "host_only": host_only,
                                        "disable_docker": disable_docker,
                                        "send_zeros": send_zeros,
                                        "period": period,
                                        "request_level_events": request_level_events,
                                        "address_transparency": address_transparency,
                                        "use_rsa": use_rsa,
                                        "full_server_cert_chain": full_server_cert_chain,
                                        "code_flow": code_flow,
                                        "inactivity_timeout": inactivity_timeout,
                                        "client_timeout": client_timeout,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["http_backend_log"]) -> MetaOapg.properties.http_backend_log: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["visibility_only"]) -> MetaOapg.properties.visibility_only: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["shield_timeout"]) -> MetaOapg.properties.shield_timeout: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["keep_alive"]) -> MetaOapg.properties.keep_alive: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["keep_idle"]) -> MetaOapg.properties.keep_idle: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["keep_interval"]) -> MetaOapg.properties.keep_interval: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["keep_count"]) -> MetaOapg.properties.keep_count: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["cpu_profile"]) -> MetaOapg.properties.cpu_profile: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["mem_profile"]) -> MetaOapg.properties.mem_profile: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["host_only"]) -> MetaOapg.properties.host_only: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["disable_docker"]) -> MetaOapg.properties.disable_docker: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["send_zeros"]) -> MetaOapg.properties.send_zeros: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["request_level_events"]) -> MetaOapg.properties.request_level_events: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["address_transparency"]) -> MetaOapg.properties.address_transparency: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["use_rsa"]) -> MetaOapg.properties.use_rsa: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["full_server_cert_chain"]) -> MetaOapg.properties.full_server_cert_chain: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["code_flow"]) -> MetaOapg.properties.code_flow: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["inactivity_timeout"]) -> MetaOapg.properties.inactivity_timeout: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["client_timeout"]) -> MetaOapg.properties.client_timeout: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["http_backend_log", "visibility_only", "shield_timeout", "keep_alive", "keep_idle", "keep_interval", "keep_count", "cpu_profile", "mem_profile", "host_only", "disable_docker", "send_zeros", "period", "request_level_events", "address_transparency", "use_rsa", "full_server_cert_chain", "code_flow", "inactivity_timeout", "client_timeout", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["http_backend_log"]) -> typing.Union[MetaOapg.properties.http_backend_log, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["visibility_only"]) -> typing.Union[MetaOapg.properties.visibility_only, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["shield_timeout"]) -> typing.Union[MetaOapg.properties.shield_timeout, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["keep_alive"]) -> typing.Union[MetaOapg.properties.keep_alive, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["keep_idle"]) -> typing.Union[MetaOapg.properties.keep_idle, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["keep_interval"]) -> typing.Union[MetaOapg.properties.keep_interval, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["keep_count"]) -> typing.Union[MetaOapg.properties.keep_count, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["cpu_profile"]) -> typing.Union[MetaOapg.properties.cpu_profile, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["mem_profile"]) -> typing.Union[MetaOapg.properties.mem_profile, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["host_only"]) -> typing.Union[MetaOapg.properties.host_only, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["disable_docker"]) -> typing.Union[MetaOapg.properties.disable_docker, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["send_zeros"]) -> typing.Union[MetaOapg.properties.send_zeros, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> typing.Union[MetaOapg.properties.period, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["request_level_events"]) -> typing.Union[MetaOapg.properties.request_level_events, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["address_transparency"]) -> typing.Union[MetaOapg.properties.address_transparency, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["use_rsa"]) -> typing.Union[MetaOapg.properties.use_rsa, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["full_server_cert_chain"]) -> typing.Union[MetaOapg.properties.full_server_cert_chain, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["code_flow"]) -> typing.Union[MetaOapg.properties.code_flow, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["inactivity_timeout"]) -> typing.Union[MetaOapg.properties.inactivity_timeout, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["client_timeout"]) -> typing.Union[MetaOapg.properties.client_timeout, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["http_backend_log", "visibility_only", "shield_timeout", "keep_alive", "keep_idle", "keep_interval", "keep_count", "cpu_profile", "mem_profile", "host_only", "disable_docker", "send_zeros", "period", "request_level_events", "address_transparency", "use_rsa", "full_server_cert_chain", "code_flow", "inactivity_timeout", "client_timeout", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                http_backend_log: typing.Union[MetaOapg.properties.http_backend_log, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                visibility_only: typing.Union[MetaOapg.properties.visibility_only, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                shield_timeout: typing.Union[MetaOapg.properties.shield_timeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                keep_alive: typing.Union[MetaOapg.properties.keep_alive, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                keep_idle: typing.Union[MetaOapg.properties.keep_idle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                keep_interval: typing.Union[MetaOapg.properties.keep_interval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                keep_count: typing.Union[MetaOapg.properties.keep_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                cpu_profile: typing.Union[MetaOapg.properties.cpu_profile, str, schemas.Unset] = schemas.unset,
                                mem_profile: typing.Union[MetaOapg.properties.mem_profile, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                host_only: typing.Union[MetaOapg.properties.host_only, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                disable_docker: typing.Union[MetaOapg.properties.disable_docker, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                send_zeros: typing.Union[MetaOapg.properties.send_zeros, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                period: typing.Union[MetaOapg.properties.period, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                request_level_events: typing.Union[MetaOapg.properties.request_level_events, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                address_transparency: typing.Union[MetaOapg.properties.address_transparency, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                use_rsa: typing.Union[MetaOapg.properties.use_rsa, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                full_server_cert_chain: typing.Union[MetaOapg.properties.full_server_cert_chain, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                code_flow: typing.Union[MetaOapg.properties.code_flow, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                inactivity_timeout: typing.Union[MetaOapg.properties.inactivity_timeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                client_timeout: typing.Union[MetaOapg.properties.client_timeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'debugging':
                                return super().__new__(
                                    cls,
                                    *args,
                                    http_backend_log=http_backend_log,
                                    visibility_only=visibility_only,
                                    shield_timeout=shield_timeout,
                                    keep_alive=keep_alive,
                                    keep_idle=keep_idle,
                                    keep_interval=keep_interval,
                                    keep_count=keep_count,
                                    cpu_profile=cpu_profile,
                                    mem_profile=mem_profile,
                                    host_only=host_only,
                                    disable_docker=disable_docker,
                                    send_zeros=send_zeros,
                                    period=period,
                                    request_level_events=request_level_events,
                                    address_transparency=address_transparency,
                                    use_rsa=use_rsa,
                                    full_server_cert_chain=full_server_cert_chain,
                                    code_flow=code_flow,
                                    inactivity_timeout=inactivity_timeout,
                                    client_timeout=client_timeout,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "base": base,
                            "logging": logging,
                            "events": events,
                            "hosted_web_services": hosted_web_services,
                            "infrastructure_services": infrastructure_services,
                            "denial_of_service_protection": denial_of_service_protection,
                            "miscellaneous": miscellaneous,
                            "debugging": debugging,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["base"]) -> MetaOapg.properties.base: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["logging"]) -> MetaOapg.properties.logging: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["hosted_web_services"]) -> MetaOapg.properties.hosted_web_services: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["infrastructure_services"]) -> MetaOapg.properties.infrastructure_services: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["denial_of_service_protection"]) -> MetaOapg.properties.denial_of_service_protection: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["miscellaneous"]) -> MetaOapg.properties.miscellaneous: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["debugging"]) -> MetaOapg.properties.debugging: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["base", "logging", "events", "hosted_web_services", "infrastructure_services", "denial_of_service_protection", "miscellaneous", "debugging", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["base"]) -> typing.Union[MetaOapg.properties.base, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["logging"]) -> typing.Union[MetaOapg.properties.logging, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> typing.Union[MetaOapg.properties.events, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["hosted_web_services"]) -> typing.Union[MetaOapg.properties.hosted_web_services, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["infrastructure_services"]) -> typing.Union[MetaOapg.properties.infrastructure_services, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["denial_of_service_protection"]) -> typing.Union[MetaOapg.properties.denial_of_service_protection, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["miscellaneous"]) -> typing.Union[MetaOapg.properties.miscellaneous, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["debugging"]) -> typing.Union[MetaOapg.properties.debugging, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["base", "logging", "events", "hosted_web_services", "infrastructure_services", "denial_of_service_protection", "miscellaneous", "debugging", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    base: typing.Union[MetaOapg.properties.base, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    logging: typing.Union[MetaOapg.properties.logging, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    events: typing.Union[MetaOapg.properties.events, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    hosted_web_services: typing.Union[MetaOapg.properties.hosted_web_services, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    infrastructure_services: typing.Union[MetaOapg.properties.infrastructure_services, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    denial_of_service_protection: typing.Union[MetaOapg.properties.denial_of_service_protection, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    miscellaneous: typing.Union[MetaOapg.properties.miscellaneous, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    debugging: typing.Union[MetaOapg.properties.debugging, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *args,
                        base=base,
                        logging=logging,
                        events=events,
                        hosted_web_services=hosted_web_services,
                        infrastructure_services=infrastructure_services,
                        denial_of_service_protection=denial_of_service_protection,
                        miscellaneous=miscellaneous,
                        debugging=debugging,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "request_id": request_id,
                "error_code": error_code,
                "error_description": error_description,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_description"]) -> MetaOapg.properties.error_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_description"]) -> typing.Union[MetaOapg.properties.error_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        error_code: typing.Union[MetaOapg.properties.error_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error_description: typing.Union[MetaOapg.properties.error_description, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            request_id=request_id,
            error_code=error_code,
            error_description=error_description,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor400ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            request_id = schemas.StrSchema
            error_code = schemas.IntSchema
            error_description = schemas.StrSchema
            data = schemas.IntSchema
            __annotations__ = {
                "request_id": request_id,
                "error_code": error_code,
                "error_description": error_description,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_description"]) -> MetaOapg.properties.error_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_description"]) -> typing.Union[MetaOapg.properties.error_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        error_code: typing.Union[MetaOapg.properties.error_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error_description: typing.Union[MetaOapg.properties.error_description, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor400ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            request_id=request_id,
            error_code=error_code,
            error_description=error_description,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v2_access_tier_access_tier_id_config_put_oapg(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Update Access Tier Local Config
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_access_tier_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_any_type.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='put'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V2AccessTierAccessTierIdConfigPut(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v2_access_tier_access_tier_id_config_put(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v2_access_tier_access_tier_id_config_put_oapg(
            body=body,
            header_params=header_params,
            path_params=path_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def put(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v2_access_tier_access_tier_id_config_put_oapg(
            body=body,
            header_params=header_params,
            path_params=path_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


