# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# query params
MaxPerPageSchema = schemas.IntSchema
PageNumberSchema = schemas.IntSchema
EventTypeSchema = schemas.StrSchema
EventActionSchema = schemas.StrSchema
StartTimeSchema = schemas.StrSchema
EndTimeSchema = schemas.StrSchema
ServiceIDSchema = schemas.StrSchema
EmailSchema = schemas.StrSchema
SearchSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'MaxPerPage': typing.Union[MaxPerPageSchema, decimal.Decimal, int, ],
        'PageNumber': typing.Union[PageNumberSchema, decimal.Decimal, int, ],
        'EventType': typing.Union[EventTypeSchema, str, ],
        'EventAction': typing.Union[EventActionSchema, str, ],
        'StartTime': typing.Union[StartTimeSchema, str, ],
        'EndTime': typing.Union[EndTimeSchema, str, ],
        'ServiceID': typing.Union[ServiceIDSchema, str, ],
        'Email': typing.Union[EmailSchema, str, ],
        'Search': typing.Union[SearchSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_max_per_page = api_client.QueryParameter(
    name="MaxPerPage",
    style=api_client.ParameterStyle.FORM,
    schema=MaxPerPageSchema,
    explode=True,
)
request_query_page_number = api_client.QueryParameter(
    name="PageNumber",
    style=api_client.ParameterStyle.FORM,
    schema=PageNumberSchema,
    explode=True,
)
request_query_event_type = api_client.QueryParameter(
    name="EventType",
    style=api_client.ParameterStyle.FORM,
    schema=EventTypeSchema,
    explode=True,
)
request_query_event_action = api_client.QueryParameter(
    name="EventAction",
    style=api_client.ParameterStyle.FORM,
    schema=EventActionSchema,
    explode=True,
)
request_query_start_time = api_client.QueryParameter(
    name="StartTime",
    style=api_client.ParameterStyle.FORM,
    schema=StartTimeSchema,
    explode=True,
)
request_query_end_time = api_client.QueryParameter(
    name="EndTime",
    style=api_client.ParameterStyle.FORM,
    schema=EndTimeSchema,
    explode=True,
)
request_query_service_id = api_client.QueryParameter(
    name="ServiceID",
    style=api_client.ParameterStyle.FORM,
    schema=ServiceIDSchema,
    explode=True,
)
request_query_email = api_client.QueryParameter(
    name="Email",
    style=api_client.ParameterStyle.FORM,
    schema=EmailSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="Search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
# header params
AuthorizationSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    Timestamp = schemas.IntSchema
                    EventType = schemas.StrSchema
                    EventAction = schemas.StrSchema
                    ServiceID = schemas.StrSchema
                    ServiceName = schemas.StrSchema
                    ClusterID = schemas.StrSchema
                    ClusterName = schemas.StrSchema
                    EventJSON = schemas.StrSchema
                    __annotations__ = {
                        "Timestamp": Timestamp,
                        "EventType": EventType,
                        "EventAction": EventAction,
                        "ServiceID": ServiceID,
                        "ServiceName": ServiceName,
                        "ClusterID": ClusterID,
                        "ClusterName": ClusterName,
                        "EventJSON": EventJSON,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Timestamp"]) -> MetaOapg.properties.Timestamp: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EventType"]) -> MetaOapg.properties.EventType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EventAction"]) -> MetaOapg.properties.EventAction: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ServiceID"]) -> MetaOapg.properties.ServiceID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ServiceName"]) -> MetaOapg.properties.ServiceName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ClusterID"]) -> MetaOapg.properties.ClusterID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ClusterName"]) -> MetaOapg.properties.ClusterName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EventJSON"]) -> MetaOapg.properties.EventJSON: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Timestamp", "EventType", "EventAction", "ServiceID", "ServiceName", "ClusterID", "ClusterName", "EventJSON", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Timestamp"]) -> typing.Union[MetaOapg.properties.Timestamp, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EventType"]) -> typing.Union[MetaOapg.properties.EventType, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EventAction"]) -> typing.Union[MetaOapg.properties.EventAction, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ServiceID"]) -> typing.Union[MetaOapg.properties.ServiceID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ServiceName"]) -> typing.Union[MetaOapg.properties.ServiceName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ClusterID"]) -> typing.Union[MetaOapg.properties.ClusterID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ClusterName"]) -> typing.Union[MetaOapg.properties.ClusterName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EventJSON"]) -> typing.Union[MetaOapg.properties.EventJSON, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Timestamp", "EventType", "EventAction", "ServiceID", "ServiceName", "ClusterID", "ClusterName", "EventJSON", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                Timestamp: typing.Union[MetaOapg.properties.Timestamp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                EventType: typing.Union[MetaOapg.properties.EventType, str, schemas.Unset] = schemas.unset,
                EventAction: typing.Union[MetaOapg.properties.EventAction, str, schemas.Unset] = schemas.unset,
                ServiceID: typing.Union[MetaOapg.properties.ServiceID, str, schemas.Unset] = schemas.unset,
                ServiceName: typing.Union[MetaOapg.properties.ServiceName, str, schemas.Unset] = schemas.unset,
                ClusterID: typing.Union[MetaOapg.properties.ClusterID, str, schemas.Unset] = schemas.unset,
                ClusterName: typing.Union[MetaOapg.properties.ClusterName, str, schemas.Unset] = schemas.unset,
                EventJSON: typing.Union[MetaOapg.properties.EventJSON, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    Timestamp=Timestamp,
                    EventType=EventType,
                    EventAction=EventAction,
                    ServiceID=ServiceID,
                    ServiceName=ServiceName,
                    ClusterID=ClusterID,
                    ClusterName=ClusterName,
                    EventJSON=EventJSON,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_security_events_get_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        **NOTE: This Legacy Events API will be deprecated soon; it is replaced by the new [Events API](../event/).**
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_max_per_page,
            request_query_page_number,
            request_query_event_type,
            request_query_event_action,
            request_query_start_time,
            request_query_end_time,
            request_query_service_id,
            request_query_email,
            request_query_search,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1SecurityEventsGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_security_events_get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_security_events_get_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_security_events_get_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


