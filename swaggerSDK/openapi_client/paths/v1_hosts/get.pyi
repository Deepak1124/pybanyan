# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# query params
ClusterIDSchema = schemas.StrSchema
HostnameSchema = schemas.StrSchema
# header params
AuthorizationSchema = schemas.StrSchema


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    Hostname = schemas.StrSchema
                    
                    
                    class IPs(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'IPs':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    CIDRs = schemas.StrSchema
                    Cluster = schemas.StrSchema
                    
                    
                    class Workloads(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        ServiceName = schemas.StrSchema
                                        
                                        
                                        class NodeDetails(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    NodeType = schemas.StrSchema
                                                    NodeID = schemas.StrSchema
                                                    NodeName = schemas.StrSchema
                                                    Image = schemas.StrSchema
                                                    Repo = schemas.StrSchema
                                                    Tag = schemas.StrSchema
                                                    Hostname = schemas.StrSchema
                                                    
                                                    
                                                    class HostIPs(
                                                        schemas.ListSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            items = schemas.StrSchema
                                                    
                                                        def __new__(
                                                            cls,
                                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'HostIPs':
                                                            return super().__new__(
                                                                cls,
                                                                arg,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                            return super().__getitem__(i)
                                                    
                                                    
                                                    class Labels(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                com_banyanops_command = schemas.StrSchema
                                                                com_banyanops_exe = schemas.StrSchema
                                                                com_banyanops_hosttag_hname = schemas.StrSchema
                                                                com_banyanops_nodetype = schemas.StrSchema
                                                                com_banyanops_starttime = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "com.banyanops.command": com_banyanops_command,
                                                                    "com.banyanops.exe": com_banyanops_exe,
                                                                    "com.banyanops.hosttag.hname": com_banyanops_hosttag_hname,
                                                                    "com.banyanops.nodetype": com_banyanops_nodetype,
                                                                    "com.banyanops.starttime": com_banyanops_starttime,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.command"]) -> MetaOapg.properties.com_banyanops_command: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.exe"]) -> MetaOapg.properties.com_banyanops_exe: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.hname"]) -> MetaOapg.properties.com_banyanops_hosttag_hname: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.nodetype"]) -> MetaOapg.properties.com_banyanops_nodetype: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.starttime"]) -> MetaOapg.properties.com_banyanops_starttime: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["com.banyanops.command", "com.banyanops.exe", "com.banyanops.hosttag.hname", "com.banyanops.nodetype", "com.banyanops.starttime", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.command"]) -> typing.Union[MetaOapg.properties.com_banyanops_command, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.exe"]) -> typing.Union[MetaOapg.properties.com_banyanops_exe, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.hname"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_hname, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.nodetype"]) -> typing.Union[MetaOapg.properties.com_banyanops_nodetype, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.starttime"]) -> typing.Union[MetaOapg.properties.com_banyanops_starttime, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["com.banyanops.command", "com.banyanops.exe", "com.banyanops.hosttag.hname", "com.banyanops.nodetype", "com.banyanops.starttime", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'Labels':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                                    
                                                    
                                                    class NodeIPs(
                                                        schemas.ListSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            items = schemas.StrSchema
                                                    
                                                        def __new__(
                                                            cls,
                                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'NodeIPs':
                                                            return super().__new__(
                                                                cls,
                                                                arg,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                            return super().__getitem__(i)
                                                    PortMap = schemas.DictSchema
                                                    PID = schemas.IntSchema
                                                    AppName = schemas.StrSchema
                                                    ServiceName = schemas.StrSchema
                                                    ServiceID = schemas.StrSchema
                                                    ServiceType = schemas.StrSchema
                                                    ServiceClass = schemas.StrSchema
                                                    Timestamp = schemas.IntSchema
                                                    Action = schemas.StrSchema
                                                    NodeStartTime = schemas.StrSchema
                                                    NodeStopTime = schemas.StrSchema
                                                    ClusterID = schemas.StrSchema
                                                    ClusterName = schemas.StrSchema
                                                    PodName = schemas.StrSchema
                                                    __annotations__ = {
                                                        "NodeType": NodeType,
                                                        "NodeID": NodeID,
                                                        "NodeName": NodeName,
                                                        "Image": Image,
                                                        "Repo": Repo,
                                                        "Tag": Tag,
                                                        "Hostname": Hostname,
                                                        "HostIPs": HostIPs,
                                                        "Labels": Labels,
                                                        "NodeIPs": NodeIPs,
                                                        "PortMap": PortMap,
                                                        "PID": PID,
                                                        "AppName": AppName,
                                                        "ServiceName": ServiceName,
                                                        "ServiceID": ServiceID,
                                                        "ServiceType": ServiceType,
                                                        "ServiceClass": ServiceClass,
                                                        "Timestamp": Timestamp,
                                                        "Action": Action,
                                                        "NodeStartTime": NodeStartTime,
                                                        "NodeStopTime": NodeStopTime,
                                                        "ClusterID": ClusterID,
                                                        "ClusterName": ClusterName,
                                                        "PodName": PodName,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["NodeType"]) -> MetaOapg.properties.NodeType: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["NodeID"]) -> MetaOapg.properties.NodeID: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["NodeName"]) -> MetaOapg.properties.NodeName: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["Image"]) -> MetaOapg.properties.Image: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["Repo"]) -> MetaOapg.properties.Repo: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["Tag"]) -> MetaOapg.properties.Tag: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["Hostname"]) -> MetaOapg.properties.Hostname: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["HostIPs"]) -> MetaOapg.properties.HostIPs: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["Labels"]) -> MetaOapg.properties.Labels: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["NodeIPs"]) -> MetaOapg.properties.NodeIPs: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["PortMap"]) -> MetaOapg.properties.PortMap: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["PID"]) -> MetaOapg.properties.PID: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["AppName"]) -> MetaOapg.properties.AppName: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ServiceName"]) -> MetaOapg.properties.ServiceName: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ServiceID"]) -> MetaOapg.properties.ServiceID: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ServiceType"]) -> MetaOapg.properties.ServiceType: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ServiceClass"]) -> MetaOapg.properties.ServiceClass: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["Timestamp"]) -> MetaOapg.properties.Timestamp: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["Action"]) -> MetaOapg.properties.Action: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["NodeStartTime"]) -> MetaOapg.properties.NodeStartTime: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["NodeStopTime"]) -> MetaOapg.properties.NodeStopTime: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ClusterID"]) -> MetaOapg.properties.ClusterID: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ClusterName"]) -> MetaOapg.properties.ClusterName: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["PodName"]) -> MetaOapg.properties.PodName: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["NodeType", "NodeID", "NodeName", "Image", "Repo", "Tag", "Hostname", "HostIPs", "Labels", "NodeIPs", "PortMap", "PID", "AppName", "ServiceName", "ServiceID", "ServiceType", "ServiceClass", "Timestamp", "Action", "NodeStartTime", "NodeStopTime", "ClusterID", "ClusterName", "PodName", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["NodeType"]) -> typing.Union[MetaOapg.properties.NodeType, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["NodeID"]) -> typing.Union[MetaOapg.properties.NodeID, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["NodeName"]) -> typing.Union[MetaOapg.properties.NodeName, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["Image"]) -> typing.Union[MetaOapg.properties.Image, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["Repo"]) -> typing.Union[MetaOapg.properties.Repo, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["Tag"]) -> typing.Union[MetaOapg.properties.Tag, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["Hostname"]) -> typing.Union[MetaOapg.properties.Hostname, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["HostIPs"]) -> typing.Union[MetaOapg.properties.HostIPs, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["Labels"]) -> typing.Union[MetaOapg.properties.Labels, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["NodeIPs"]) -> typing.Union[MetaOapg.properties.NodeIPs, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["PortMap"]) -> typing.Union[MetaOapg.properties.PortMap, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["PID"]) -> typing.Union[MetaOapg.properties.PID, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["AppName"]) -> typing.Union[MetaOapg.properties.AppName, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ServiceName"]) -> typing.Union[MetaOapg.properties.ServiceName, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ServiceID"]) -> typing.Union[MetaOapg.properties.ServiceID, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ServiceType"]) -> typing.Union[MetaOapg.properties.ServiceType, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ServiceClass"]) -> typing.Union[MetaOapg.properties.ServiceClass, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["Timestamp"]) -> typing.Union[MetaOapg.properties.Timestamp, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["Action"]) -> typing.Union[MetaOapg.properties.Action, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["NodeStartTime"]) -> typing.Union[MetaOapg.properties.NodeStartTime, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["NodeStopTime"]) -> typing.Union[MetaOapg.properties.NodeStopTime, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ClusterID"]) -> typing.Union[MetaOapg.properties.ClusterID, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ClusterName"]) -> typing.Union[MetaOapg.properties.ClusterName, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["PodName"]) -> typing.Union[MetaOapg.properties.PodName, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["NodeType", "NodeID", "NodeName", "Image", "Repo", "Tag", "Hostname", "HostIPs", "Labels", "NodeIPs", "PortMap", "PID", "AppName", "ServiceName", "ServiceID", "ServiceType", "ServiceClass", "Timestamp", "Action", "NodeStartTime", "NodeStopTime", "ClusterID", "ClusterName", "PodName", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                NodeType: typing.Union[MetaOapg.properties.NodeType, str, schemas.Unset] = schemas.unset,
                                                NodeID: typing.Union[MetaOapg.properties.NodeID, str, schemas.Unset] = schemas.unset,
                                                NodeName: typing.Union[MetaOapg.properties.NodeName, str, schemas.Unset] = schemas.unset,
                                                Image: typing.Union[MetaOapg.properties.Image, str, schemas.Unset] = schemas.unset,
                                                Repo: typing.Union[MetaOapg.properties.Repo, str, schemas.Unset] = schemas.unset,
                                                Tag: typing.Union[MetaOapg.properties.Tag, str, schemas.Unset] = schemas.unset,
                                                Hostname: typing.Union[MetaOapg.properties.Hostname, str, schemas.Unset] = schemas.unset,
                                                HostIPs: typing.Union[MetaOapg.properties.HostIPs, list, tuple, schemas.Unset] = schemas.unset,
                                                Labels: typing.Union[MetaOapg.properties.Labels, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                NodeIPs: typing.Union[MetaOapg.properties.NodeIPs, list, tuple, schemas.Unset] = schemas.unset,
                                                PortMap: typing.Union[MetaOapg.properties.PortMap, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                PID: typing.Union[MetaOapg.properties.PID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                AppName: typing.Union[MetaOapg.properties.AppName, str, schemas.Unset] = schemas.unset,
                                                ServiceName: typing.Union[MetaOapg.properties.ServiceName, str, schemas.Unset] = schemas.unset,
                                                ServiceID: typing.Union[MetaOapg.properties.ServiceID, str, schemas.Unset] = schemas.unset,
                                                ServiceType: typing.Union[MetaOapg.properties.ServiceType, str, schemas.Unset] = schemas.unset,
                                                ServiceClass: typing.Union[MetaOapg.properties.ServiceClass, str, schemas.Unset] = schemas.unset,
                                                Timestamp: typing.Union[MetaOapg.properties.Timestamp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                Action: typing.Union[MetaOapg.properties.Action, str, schemas.Unset] = schemas.unset,
                                                NodeStartTime: typing.Union[MetaOapg.properties.NodeStartTime, str, schemas.Unset] = schemas.unset,
                                                NodeStopTime: typing.Union[MetaOapg.properties.NodeStopTime, str, schemas.Unset] = schemas.unset,
                                                ClusterID: typing.Union[MetaOapg.properties.ClusterID, str, schemas.Unset] = schemas.unset,
                                                ClusterName: typing.Union[MetaOapg.properties.ClusterName, str, schemas.Unset] = schemas.unset,
                                                PodName: typing.Union[MetaOapg.properties.PodName, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'NodeDetails':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    NodeType=NodeType,
                                                    NodeID=NodeID,
                                                    NodeName=NodeName,
                                                    Image=Image,
                                                    Repo=Repo,
                                                    Tag=Tag,
                                                    Hostname=Hostname,
                                                    HostIPs=HostIPs,
                                                    Labels=Labels,
                                                    NodeIPs=NodeIPs,
                                                    PortMap=PortMap,
                                                    PID=PID,
                                                    AppName=AppName,
                                                    ServiceName=ServiceName,
                                                    ServiceID=ServiceID,
                                                    ServiceType=ServiceType,
                                                    ServiceClass=ServiceClass,
                                                    Timestamp=Timestamp,
                                                    Action=Action,
                                                    NodeStartTime=NodeStartTime,
                                                    NodeStopTime=NodeStopTime,
                                                    ClusterID=ClusterID,
                                                    ClusterName=ClusterName,
                                                    PodName=PodName,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        __annotations__ = {
                                            "ServiceName": ServiceName,
                                            "NodeDetails": NodeDetails,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["ServiceName"]) -> MetaOapg.properties.ServiceName: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["NodeDetails"]) -> MetaOapg.properties.NodeDetails: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["ServiceName", "NodeDetails", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["ServiceName"]) -> typing.Union[MetaOapg.properties.ServiceName, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["NodeDetails"]) -> typing.Union[MetaOapg.properties.NodeDetails, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ServiceName", "NodeDetails", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    ServiceName: typing.Union[MetaOapg.properties.ServiceName, str, schemas.Unset] = schemas.unset,
                                    NodeDetails: typing.Union[MetaOapg.properties.NodeDetails, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        ServiceName=ServiceName,
                                        NodeDetails=NodeDetails,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'Workloads':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    __annotations__ = {
                        "Hostname": Hostname,
                        "IPs": IPs,
                        "CIDRs": CIDRs,
                        "Cluster": Cluster,
                        "Workloads": Workloads,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Hostname"]) -> MetaOapg.properties.Hostname: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IPs"]) -> MetaOapg.properties.IPs: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CIDRs"]) -> MetaOapg.properties.CIDRs: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Cluster"]) -> MetaOapg.properties.Cluster: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Workloads"]) -> MetaOapg.properties.Workloads: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Hostname", "IPs", "CIDRs", "Cluster", "Workloads", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Hostname"]) -> typing.Union[MetaOapg.properties.Hostname, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IPs"]) -> typing.Union[MetaOapg.properties.IPs, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CIDRs"]) -> typing.Union[MetaOapg.properties.CIDRs, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Cluster"]) -> typing.Union[MetaOapg.properties.Cluster, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Workloads"]) -> typing.Union[MetaOapg.properties.Workloads, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Hostname", "IPs", "CIDRs", "Cluster", "Workloads", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                Hostname: typing.Union[MetaOapg.properties.Hostname, str, schemas.Unset] = schemas.unset,
                IPs: typing.Union[MetaOapg.properties.IPs, list, tuple, schemas.Unset] = schemas.unset,
                CIDRs: typing.Union[MetaOapg.properties.CIDRs, str, schemas.Unset] = schemas.unset,
                Cluster: typing.Union[MetaOapg.properties.Cluster, str, schemas.Unset] = schemas.unset,
                Workloads: typing.Union[MetaOapg.properties.Workloads, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    Hostname=Hostname,
                    IPs=IPs,
                    CIDRs=CIDRs,
                    Cluster=Cluster,
                    Workloads=Workloads,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_hosts_get_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Get hosts list
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_cluster_id,
            request_query_hostname,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1HostsGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_hosts_get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_hosts_get_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_hosts_get_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


