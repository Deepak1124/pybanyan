# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# query params
EmailSchema = schemas.StrSchema
SerialNumberSchema = schemas.StrSchema
# header params
AuthorizationSchema = schemas.StrSchema
ContentTypeSchema = schemas.StrSchema
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            Level = schemas.StrSchema
            Reason = schemas.StrSchema
            ExtSource = schemas.StrSchema
            __annotations__ = {
                "Level": Level,
                "Reason": Reason,
                "ExtSource": ExtSource,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Level"]) -> MetaOapg.properties.Level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Reason"]) -> MetaOapg.properties.Reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExtSource"]) -> MetaOapg.properties.ExtSource: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Level", "Reason", "ExtSource", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Level"]) -> typing.Union[MetaOapg.properties.Level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Reason"]) -> typing.Union[MetaOapg.properties.Reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExtSource"]) -> typing.Union[MetaOapg.properties.ExtSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Level", "Reason", "ExtSource", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Level: typing.Union[MetaOapg.properties.Level, str, schemas.Unset] = schemas.unset,
        Reason: typing.Union[MetaOapg.properties.Reason, str, schemas.Unset] = schemas.unset,
        ExtSource: typing.Union[MetaOapg.properties.ExtSource, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            Level=Level,
            Reason=Reason,
            ExtSource=ExtSource,
            _configuration=_configuration,
            **kwargs,
        )


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            TrustType = schemas.StrSchema
            TrustID = schemas.StrSchema
            Score = schemas.IntSchema
            Level = schemas.StrSchema
            Reason = schemas.StrSchema
            ExtSource = schemas.StrSchema
            FactorsJSON = schemas.StrSchema
            CreatedAt = schemas.IntSchema
            DeletedAt = schemas.IntSchema
            LastUpdatedAt = schemas.IntSchema
            __annotations__ = {
                "TrustType": TrustType,
                "TrustID": TrustID,
                "Score": Score,
                "Level": Level,
                "Reason": Reason,
                "ExtSource": ExtSource,
                "FactorsJSON": FactorsJSON,
                "CreatedAt": CreatedAt,
                "DeletedAt": DeletedAt,
                "LastUpdatedAt": LastUpdatedAt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrustType"]) -> MetaOapg.properties.TrustType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrustID"]) -> MetaOapg.properties.TrustID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Score"]) -> MetaOapg.properties.Score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Level"]) -> MetaOapg.properties.Level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Reason"]) -> MetaOapg.properties.Reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExtSource"]) -> MetaOapg.properties.ExtSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FactorsJSON"]) -> MetaOapg.properties.FactorsJSON: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreatedAt"]) -> MetaOapg.properties.CreatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeletedAt"]) -> MetaOapg.properties.DeletedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> MetaOapg.properties.LastUpdatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["TrustType", "TrustID", "Score", "Level", "Reason", "ExtSource", "FactorsJSON", "CreatedAt", "DeletedAt", "LastUpdatedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrustType"]) -> typing.Union[MetaOapg.properties.TrustType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrustID"]) -> typing.Union[MetaOapg.properties.TrustID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Score"]) -> typing.Union[MetaOapg.properties.Score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Level"]) -> typing.Union[MetaOapg.properties.Level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Reason"]) -> typing.Union[MetaOapg.properties.Reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExtSource"]) -> typing.Union[MetaOapg.properties.ExtSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FactorsJSON"]) -> typing.Union[MetaOapg.properties.FactorsJSON, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreatedAt"]) -> typing.Union[MetaOapg.properties.CreatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeletedAt"]) -> typing.Union[MetaOapg.properties.DeletedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> typing.Union[MetaOapg.properties.LastUpdatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["TrustType", "TrustID", "Score", "Level", "Reason", "ExtSource", "FactorsJSON", "CreatedAt", "DeletedAt", "LastUpdatedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        TrustType: typing.Union[MetaOapg.properties.TrustType, str, schemas.Unset] = schemas.unset,
        TrustID: typing.Union[MetaOapg.properties.TrustID, str, schemas.Unset] = schemas.unset,
        Score: typing.Union[MetaOapg.properties.Score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Level: typing.Union[MetaOapg.properties.Level, str, schemas.Unset] = schemas.unset,
        Reason: typing.Union[MetaOapg.properties.Reason, str, schemas.Unset] = schemas.unset,
        ExtSource: typing.Union[MetaOapg.properties.ExtSource, str, schemas.Unset] = schemas.unset,
        FactorsJSON: typing.Union[MetaOapg.properties.FactorsJSON, str, schemas.Unset] = schemas.unset,
        CreatedAt: typing.Union[MetaOapg.properties.CreatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        DeletedAt: typing.Union[MetaOapg.properties.DeletedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        LastUpdatedAt: typing.Union[MetaOapg.properties.LastUpdatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            TrustType=TrustType,
            TrustID=TrustID,
            Score=Score,
            Level=Level,
            Reason=Reason,
            ExtSource=ExtSource,
            FactorsJSON=FactorsJSON,
            CreatedAt=CreatedAt,
            DeletedAt=DeletedAt,
            LastUpdatedAt=LastUpdatedAt,
            _configuration=_configuration,
            **kwargs,
        )
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_set_max_trust_level_post_oapg(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Set Max Trust Level
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_email,
            request_query_serial_number,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
            request_header_content_type,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_any_type.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1SetMaxTrustLevelPost(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_set_max_trust_level_post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_set_max_trust_level_post_oapg(
            body=body,
            query_params=query_params,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_set_max_trust_level_post_oapg(
            body=body,
            query_params=query_params,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


