# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# query params
ClusterIDSchema = schemas.StrSchema
AccessTierSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'ClusterID': typing.Union[ClusterIDSchema, str, ],
        'AccessTier': typing.Union[AccessTierSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_cluster_id = api_client.QueryParameter(
    name="ClusterID",
    style=api_client.ParameterStyle.FORM,
    schema=ClusterIDSchema,
    explode=True,
)
request_query_access_tier = api_client.QueryParameter(
    name="AccessTier",
    style=api_client.ParameterStyle.FORM,
    schema=AccessTierSchema,
    explode=True,
)
# header params
AuthorizationSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    Hostname = schemas.StrSchema
                    
                    
                    class IPs(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'IPs':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    Version = schemas.StrSchema
                    Visibility = schemas.IntSchema
                    CIDRs = schemas.StrSchema
                    
                    
                    class HostTags(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                com_banyanops_hosttag_hname = schemas.StrSchema
                                com_banyanops_hosttag_location = schemas.StrSchema
                                com_banyanops_hosttag_site_address = schemas.StrSchema
                                com_banyanops_hosttag_site_autoscale = schemas.StrSchema
                                com_banyanops_hosttag_site_domain_names = schemas.StrSchema
                                com_banyanops_hosttag_site_name = schemas.StrSchema
                                __annotations__ = {
                                    "com.banyanops.hosttag.hname": com_banyanops_hosttag_hname,
                                    "com.banyanops.hosttag.location": com_banyanops_hosttag_location,
                                    "com.banyanops.hosttag.site_address": com_banyanops_hosttag_site_address,
                                    "com.banyanops.hosttag.site_autoscale": com_banyanops_hosttag_site_autoscale,
                                    "com.banyanops.hosttag.site_domain_names": com_banyanops_hosttag_site_domain_names,
                                    "com.banyanops.hosttag.site_name": com_banyanops_hosttag_site_name,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.hname"]) -> MetaOapg.properties.com_banyanops_hosttag_hname: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.location"]) -> MetaOapg.properties.com_banyanops_hosttag_location: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_address"]) -> MetaOapg.properties.com_banyanops_hosttag_site_address: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_autoscale"]) -> MetaOapg.properties.com_banyanops_hosttag_site_autoscale: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_domain_names"]) -> MetaOapg.properties.com_banyanops_hosttag_site_domain_names: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_name"]) -> MetaOapg.properties.com_banyanops_hosttag_site_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["com.banyanops.hosttag.hname", "com.banyanops.hosttag.location", "com.banyanops.hosttag.site_address", "com.banyanops.hosttag.site_autoscale", "com.banyanops.hosttag.site_domain_names", "com.banyanops.hosttag.site_name", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.hname"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_hname, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.location"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_location, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_address"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_address, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_autoscale"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_autoscale, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_domain_names"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_domain_names, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["com.banyanops.hosttag.site_name"]) -> typing.Union[MetaOapg.properties.com_banyanops_hosttag_site_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["com.banyanops.hosttag.hname", "com.banyanops.hosttag.location", "com.banyanops.hosttag.site_address", "com.banyanops.hosttag.site_autoscale", "com.banyanops.hosttag.site_domain_names", "com.banyanops.hosttag.site_name", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'HostTags':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    Uname = schemas.StrSchema
                    SiteName = schemas.StrSchema
                    ClusterID = schemas.StrSchema
                    IpTables = schemas.StrSchema
                    __annotations__ = {
                        "Hostname": Hostname,
                        "IPs": IPs,
                        "Version": Version,
                        "Visibility": Visibility,
                        "CIDRs": CIDRs,
                        "HostTags": HostTags,
                        "Uname": Uname,
                        "SiteName": SiteName,
                        "ClusterID": ClusterID,
                        "IpTables": IpTables,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Hostname"]) -> MetaOapg.properties.Hostname: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IPs"]) -> MetaOapg.properties.IPs: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Version"]) -> MetaOapg.properties.Version: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Visibility"]) -> MetaOapg.properties.Visibility: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CIDRs"]) -> MetaOapg.properties.CIDRs: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["HostTags"]) -> MetaOapg.properties.HostTags: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Uname"]) -> MetaOapg.properties.Uname: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["SiteName"]) -> MetaOapg.properties.SiteName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ClusterID"]) -> MetaOapg.properties.ClusterID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IpTables"]) -> MetaOapg.properties.IpTables: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Hostname", "IPs", "Version", "Visibility", "CIDRs", "HostTags", "Uname", "SiteName", "ClusterID", "IpTables", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Hostname"]) -> typing.Union[MetaOapg.properties.Hostname, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IPs"]) -> typing.Union[MetaOapg.properties.IPs, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Version"]) -> typing.Union[MetaOapg.properties.Version, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Visibility"]) -> typing.Union[MetaOapg.properties.Visibility, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CIDRs"]) -> typing.Union[MetaOapg.properties.CIDRs, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["HostTags"]) -> typing.Union[MetaOapg.properties.HostTags, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Uname"]) -> typing.Union[MetaOapg.properties.Uname, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["SiteName"]) -> typing.Union[MetaOapg.properties.SiteName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ClusterID"]) -> typing.Union[MetaOapg.properties.ClusterID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IpTables"]) -> typing.Union[MetaOapg.properties.IpTables, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Hostname", "IPs", "Version", "Visibility", "CIDRs", "HostTags", "Uname", "SiteName", "ClusterID", "IpTables", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                Hostname: typing.Union[MetaOapg.properties.Hostname, str, schemas.Unset] = schemas.unset,
                IPs: typing.Union[MetaOapg.properties.IPs, list, tuple, schemas.Unset] = schemas.unset,
                Version: typing.Union[MetaOapg.properties.Version, str, schemas.Unset] = schemas.unset,
                Visibility: typing.Union[MetaOapg.properties.Visibility, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                CIDRs: typing.Union[MetaOapg.properties.CIDRs, str, schemas.Unset] = schemas.unset,
                HostTags: typing.Union[MetaOapg.properties.HostTags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                Uname: typing.Union[MetaOapg.properties.Uname, str, schemas.Unset] = schemas.unset,
                SiteName: typing.Union[MetaOapg.properties.SiteName, str, schemas.Unset] = schemas.unset,
                ClusterID: typing.Union[MetaOapg.properties.ClusterID, str, schemas.Unset] = schemas.unset,
                IpTables: typing.Union[MetaOapg.properties.IpTables, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    Hostname=Hostname,
                    IPs=IPs,
                    Version=Version,
                    Visibility=Visibility,
                    CIDRs=CIDRs,
                    HostTags=HostTags,
                    Uname=Uname,
                    SiteName=SiteName,
                    ClusterID=ClusterID,
                    IpTables=IpTables,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_netagents_get_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Get netagents list
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_cluster_id,
            request_query_access_tier,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1NetagentsGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_netagents_get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_netagents_get_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_netagents_get_oapg(
            query_params=query_params,
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


