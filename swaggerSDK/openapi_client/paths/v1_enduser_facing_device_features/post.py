# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# header params
AuthorizationSchema = schemas.StrSchema
ContentTypeSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
        'Content-Type': typing.Union[ContentTypeSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
)
request_header_content_type = api_client.HeaderParameter(
    name="Content-Type",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ContentTypeSchema,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            kind = schemas.StrSchema
            apiVersion = schemas.StrSchema
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        email = schemas.StrSchema
                        serialnumber = schemas.StrSchema
                        __annotations__ = {
                            "email": email,
                            "serialnumber": serialnumber,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["serialnumber"]) -> MetaOapg.properties.serialnumber: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "serialnumber", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["serialnumber"]) -> typing.Union[MetaOapg.properties.serialnumber, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "serialnumber", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                    serialnumber: typing.Union[MetaOapg.properties.serialnumber, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *args,
                        email=email,
                        serialnumber=serialnumber,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class spec(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        source = schemas.StrSchema
                        source_type = schemas.StrSchema
                        
                        
                        class running_applications(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            name = schemas.StrSchema
                                            version = schemas.StrSchema
                                            last_opened_at = schemas.IntSchema
                                            os_name = schemas.StrSchema
                                            os_version = schemas.StrSchema
                                            os_build = schemas.StrSchema
                                            updates_check_enabled = schemas.IntSchema
                                            updates_download_enabled = schemas.IntSchema
                                            updates_install_enabled = schemas.IntSchema
                                            updates_install_system_enabled = schemas.IntSchema
                                            updates_install_critical_enabled = schemas.IntSchema
                                            screen_lock_enabled = schemas.IntSchema
                                            passcode_enabled = schemas.IntSchema
                                            touchid_enabled = schemas.IntSchema
                                            faceid_enabled = schemas.IntSchema
                                            biometric_lock_enabled = schemas.IntSchema
                                            firewall_enabled = schemas.IntSchema
                                            disk_encryption_enabled = schemas.IntSchema
                                            not_jailbroken = schemas.IntSchema
                                            
                                            
                                            class integration_identities(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                integration_id = schemas.StrSchema
                                                                device_identity = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "integration_id": integration_id,
                                                                    "device_identity": device_identity,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["integration_id"]) -> MetaOapg.properties.integration_id: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["device_identity"]) -> MetaOapg.properties.device_identity: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["integration_id", "device_identity", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["integration_id"]) -> typing.Union[MetaOapg.properties.integration_id, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["device_identity"]) -> typing.Union[MetaOapg.properties.device_identity, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["integration_id", "device_identity", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            integration_id: typing.Union[MetaOapg.properties.integration_id, str, schemas.Unset] = schemas.unset,
                                                            device_identity: typing.Union[MetaOapg.properties.device_identity, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                integration_id=integration_id,
                                                                device_identity=device_identity,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'integration_identities':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "name": name,
                                                "version": version,
                                                "last_opened_at": last_opened_at,
                                                "os_name": os_name,
                                                "os_version": os_version,
                                                "os_build": os_build,
                                                "updates_check_enabled": updates_check_enabled,
                                                "updates_download_enabled": updates_download_enabled,
                                                "updates_install_enabled": updates_install_enabled,
                                                "updates_install_system_enabled": updates_install_system_enabled,
                                                "updates_install_critical_enabled": updates_install_critical_enabled,
                                                "screen_lock_enabled": screen_lock_enabled,
                                                "passcode_enabled": passcode_enabled,
                                                "touchid_enabled": touchid_enabled,
                                                "faceid_enabled": faceid_enabled,
                                                "biometric_lock_enabled": biometric_lock_enabled,
                                                "firewall_enabled": firewall_enabled,
                                                "disk_encryption_enabled": disk_encryption_enabled,
                                                "not_jailbroken": not_jailbroken,
                                                "integration_identities": integration_identities,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["last_opened_at"]) -> MetaOapg.properties.last_opened_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["os_name"]) -> MetaOapg.properties.os_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["os_version"]) -> MetaOapg.properties.os_version: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["os_build"]) -> MetaOapg.properties.os_build: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["updates_check_enabled"]) -> MetaOapg.properties.updates_check_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["updates_download_enabled"]) -> MetaOapg.properties.updates_download_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["updates_install_enabled"]) -> MetaOapg.properties.updates_install_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["updates_install_system_enabled"]) -> MetaOapg.properties.updates_install_system_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["updates_install_critical_enabled"]) -> MetaOapg.properties.updates_install_critical_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["screen_lock_enabled"]) -> MetaOapg.properties.screen_lock_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["passcode_enabled"]) -> MetaOapg.properties.passcode_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["touchid_enabled"]) -> MetaOapg.properties.touchid_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["faceid_enabled"]) -> MetaOapg.properties.faceid_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["biometric_lock_enabled"]) -> MetaOapg.properties.biometric_lock_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["firewall_enabled"]) -> MetaOapg.properties.firewall_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["disk_encryption_enabled"]) -> MetaOapg.properties.disk_encryption_enabled: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["not_jailbroken"]) -> MetaOapg.properties.not_jailbroken: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["integration_identities"]) -> MetaOapg.properties.integration_identities: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "version", "last_opened_at", "os_name", "os_version", "os_build", "updates_check_enabled", "updates_download_enabled", "updates_install_enabled", "updates_install_system_enabled", "updates_install_critical_enabled", "screen_lock_enabled", "passcode_enabled", "touchid_enabled", "faceid_enabled", "biometric_lock_enabled", "firewall_enabled", "disk_encryption_enabled", "not_jailbroken", "integration_identities", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["last_opened_at"]) -> typing.Union[MetaOapg.properties.last_opened_at, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["os_name"]) -> typing.Union[MetaOapg.properties.os_name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["os_version"]) -> typing.Union[MetaOapg.properties.os_version, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["os_build"]) -> typing.Union[MetaOapg.properties.os_build, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["updates_check_enabled"]) -> typing.Union[MetaOapg.properties.updates_check_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["updates_download_enabled"]) -> typing.Union[MetaOapg.properties.updates_download_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["updates_install_enabled"]) -> typing.Union[MetaOapg.properties.updates_install_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["updates_install_system_enabled"]) -> typing.Union[MetaOapg.properties.updates_install_system_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["updates_install_critical_enabled"]) -> typing.Union[MetaOapg.properties.updates_install_critical_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["screen_lock_enabled"]) -> typing.Union[MetaOapg.properties.screen_lock_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["passcode_enabled"]) -> typing.Union[MetaOapg.properties.passcode_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["touchid_enabled"]) -> typing.Union[MetaOapg.properties.touchid_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["faceid_enabled"]) -> typing.Union[MetaOapg.properties.faceid_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["biometric_lock_enabled"]) -> typing.Union[MetaOapg.properties.biometric_lock_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["firewall_enabled"]) -> typing.Union[MetaOapg.properties.firewall_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["disk_encryption_enabled"]) -> typing.Union[MetaOapg.properties.disk_encryption_enabled, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["not_jailbroken"]) -> typing.Union[MetaOapg.properties.not_jailbroken, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["integration_identities"]) -> typing.Union[MetaOapg.properties.integration_identities, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "version", "last_opened_at", "os_name", "os_version", "os_build", "updates_check_enabled", "updates_download_enabled", "updates_install_enabled", "updates_install_system_enabled", "updates_install_critical_enabled", "screen_lock_enabled", "passcode_enabled", "touchid_enabled", "faceid_enabled", "biometric_lock_enabled", "firewall_enabled", "disk_encryption_enabled", "not_jailbroken", "integration_identities", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
                                        last_opened_at: typing.Union[MetaOapg.properties.last_opened_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        os_name: typing.Union[MetaOapg.properties.os_name, str, schemas.Unset] = schemas.unset,
                                        os_version: typing.Union[MetaOapg.properties.os_version, str, schemas.Unset] = schemas.unset,
                                        os_build: typing.Union[MetaOapg.properties.os_build, str, schemas.Unset] = schemas.unset,
                                        updates_check_enabled: typing.Union[MetaOapg.properties.updates_check_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        updates_download_enabled: typing.Union[MetaOapg.properties.updates_download_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        updates_install_enabled: typing.Union[MetaOapg.properties.updates_install_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        updates_install_system_enabled: typing.Union[MetaOapg.properties.updates_install_system_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        updates_install_critical_enabled: typing.Union[MetaOapg.properties.updates_install_critical_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        screen_lock_enabled: typing.Union[MetaOapg.properties.screen_lock_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        passcode_enabled: typing.Union[MetaOapg.properties.passcode_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        touchid_enabled: typing.Union[MetaOapg.properties.touchid_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        faceid_enabled: typing.Union[MetaOapg.properties.faceid_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        biometric_lock_enabled: typing.Union[MetaOapg.properties.biometric_lock_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        firewall_enabled: typing.Union[MetaOapg.properties.firewall_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        disk_encryption_enabled: typing.Union[MetaOapg.properties.disk_encryption_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        not_jailbroken: typing.Union[MetaOapg.properties.not_jailbroken, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        integration_identities: typing.Union[MetaOapg.properties.integration_identities, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            name=name,
                                            version=version,
                                            last_opened_at=last_opened_at,
                                            os_name=os_name,
                                            os_version=os_version,
                                            os_build=os_build,
                                            updates_check_enabled=updates_check_enabled,
                                            updates_download_enabled=updates_download_enabled,
                                            updates_install_enabled=updates_install_enabled,
                                            updates_install_system_enabled=updates_install_system_enabled,
                                            updates_install_critical_enabled=updates_install_critical_enabled,
                                            screen_lock_enabled=screen_lock_enabled,
                                            passcode_enabled=passcode_enabled,
                                            touchid_enabled=touchid_enabled,
                                            faceid_enabled=faceid_enabled,
                                            biometric_lock_enabled=biometric_lock_enabled,
                                            firewall_enabled=firewall_enabled,
                                            disk_encryption_enabled=disk_encryption_enabled,
                                            not_jailbroken=not_jailbroken,
                                            integration_identities=integration_identities,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'running_applications':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "source": source,
                            "source_type": source_type,
                            "running_applications": running_applications,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["source_type"]) -> MetaOapg.properties.source_type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["running_applications"]) -> MetaOapg.properties.running_applications: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["source", "source_type", "running_applications", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["source_type"]) -> typing.Union[MetaOapg.properties.source_type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["running_applications"]) -> typing.Union[MetaOapg.properties.running_applications, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source", "source_type", "running_applications", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
                    source_type: typing.Union[MetaOapg.properties.source_type, str, schemas.Unset] = schemas.unset,
                    running_applications: typing.Union[MetaOapg.properties.running_applications, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'spec':
                    return super().__new__(
                        cls,
                        *args,
                        source=source,
                        source_type=source_type,
                        running_applications=running_applications,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "kind": kind,
                "apiVersion": apiVersion,
                "metadata": metadata,
                "spec": spec,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiVersion"]) -> MetaOapg.properties.apiVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spec"]) -> MetaOapg.properties.spec: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kind", "apiVersion", "metadata", "spec", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiVersion"]) -> typing.Union[MetaOapg.properties.apiVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spec"]) -> typing.Union[MetaOapg.properties.spec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kind", "apiVersion", "metadata", "spec", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        apiVersion: typing.Union[MetaOapg.properties.apiVersion, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        spec: typing.Union[MetaOapg.properties.spec, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            kind=kind,
            apiVersion=apiVersion,
            metadata=metadata,
            spec=spec,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'bearerReportingToken',
]


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


class SchemaFor500ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class error(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        code = schemas.StrSchema
                        message = schemas.StrSchema
                        __annotations__ = {
                            "code": code,
                            "message": message,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "message", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "message", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
                    message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'error':
                    return super().__new__(
                        cls,
                        *args,
                        code=code,
                        message=message,
                        _configuration=_configuration,
                        **kwargs,
                    )
            request_id = schemas.StrSchema
            Message = schemas.StrSchema
            __annotations__ = {
                "error": error,
                "request_id": request_id,
                "Message": Message,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Message"]) -> MetaOapg.properties.Message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error", "request_id", "Message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Message"]) -> typing.Union[MetaOapg.properties.Message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error", "request_id", "Message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        error: typing.Union[MetaOapg.properties.error, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        Message: typing.Union[MetaOapg.properties.Message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor500ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            error=error,
            request_id=request_id,
            Message=Message,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '401': _response_for_401,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_enduser_facing_device_features_post_oapg(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Submit device features
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
            request_header_content_type,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_any_type.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1EnduserFacingDeviceFeaturesPost(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_enduser_facing_device_features_post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_enduser_facing_device_features_post_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_enduser_facing_device_features_post_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


