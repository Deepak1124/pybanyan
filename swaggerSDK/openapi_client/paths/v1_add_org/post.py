# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# query params
OrgNameSchema = schemas.StrSchema
NoVPNStatusSchema = schemas.StrSchema
NonAccessIdentityEventRetentionDurationInHoursSchema = schemas.StrSchema
AccessEventRetentionDurationInHoursSchema = schemas.StrSchema
IdentityEventRetentionDurationInHoursSchema = schemas.StrSchema
OwnerEmailSchema = schemas.StrSchema
FirstSchema = schemas.StrSchema
LastSchema = schemas.StrSchema
APIServerLocationSchema = schemas.StrSchema
IsTunnelEnabledSchema = schemas.StrSchema
IsTestDriveSchema = schemas.StrSchema
EditionSchema = schemas.StrSchema
ZoneIDSchema = schemas.StrSchema
GlobalDomainDirectoryURLSchema = schemas.StrSchema
IsAutoRenewCertsEnabledSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'OrgName': typing.Union[OrgNameSchema, str, ],
        'NoVPNStatus': typing.Union[NoVPNStatusSchema, str, ],
        'NonAccessIdentityEventRetentionDurationInHours': typing.Union[NonAccessIdentityEventRetentionDurationInHoursSchema, str, ],
        'AccessEventRetentionDurationInHours': typing.Union[AccessEventRetentionDurationInHoursSchema, str, ],
        'IdentityEventRetentionDurationInHours': typing.Union[IdentityEventRetentionDurationInHoursSchema, str, ],
        'OwnerEmail': typing.Union[OwnerEmailSchema, str, ],
        'First': typing.Union[FirstSchema, str, ],
        'Last': typing.Union[LastSchema, str, ],
        'APIServerLocation': typing.Union[APIServerLocationSchema, str, ],
        'IsTunnelEnabled': typing.Union[IsTunnelEnabledSchema, str, ],
        'IsTestDrive': typing.Union[IsTestDriveSchema, str, ],
        'Edition': typing.Union[EditionSchema, str, ],
        'ZoneID': typing.Union[ZoneIDSchema, str, ],
        'GlobalDomainDirectoryURL': typing.Union[GlobalDomainDirectoryURLSchema, str, ],
        'IsAutoRenewCertsEnabled': typing.Union[IsAutoRenewCertsEnabledSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_org_name = api_client.QueryParameter(
    name="OrgName",
    style=api_client.ParameterStyle.FORM,
    schema=OrgNameSchema,
    explode=True,
)
request_query_no_vpn_status = api_client.QueryParameter(
    name="NoVPNStatus",
    style=api_client.ParameterStyle.FORM,
    schema=NoVPNStatusSchema,
    explode=True,
)
request_query_non_access_identity_event_retention_duration_in_hours = api_client.QueryParameter(
    name="NonAccessIdentityEventRetentionDurationInHours",
    style=api_client.ParameterStyle.FORM,
    schema=NonAccessIdentityEventRetentionDurationInHoursSchema,
    explode=True,
)
request_query_access_event_retention_duration_in_hours = api_client.QueryParameter(
    name="AccessEventRetentionDurationInHours",
    style=api_client.ParameterStyle.FORM,
    schema=AccessEventRetentionDurationInHoursSchema,
    explode=True,
)
request_query_identity_event_retention_duration_in_hours = api_client.QueryParameter(
    name="IdentityEventRetentionDurationInHours",
    style=api_client.ParameterStyle.FORM,
    schema=IdentityEventRetentionDurationInHoursSchema,
    explode=True,
)
request_query_owner_email = api_client.QueryParameter(
    name="OwnerEmail",
    style=api_client.ParameterStyle.FORM,
    schema=OwnerEmailSchema,
    explode=True,
)
request_query_first = api_client.QueryParameter(
    name="First",
    style=api_client.ParameterStyle.FORM,
    schema=FirstSchema,
    explode=True,
)
request_query_last = api_client.QueryParameter(
    name="Last",
    style=api_client.ParameterStyle.FORM,
    schema=LastSchema,
    explode=True,
)
request_query_api_server_location = api_client.QueryParameter(
    name="APIServerLocation",
    style=api_client.ParameterStyle.FORM,
    schema=APIServerLocationSchema,
    explode=True,
)
request_query_is_tunnel_enabled = api_client.QueryParameter(
    name="IsTunnelEnabled",
    style=api_client.ParameterStyle.FORM,
    schema=IsTunnelEnabledSchema,
    explode=True,
)
request_query_is_test_drive = api_client.QueryParameter(
    name="IsTestDrive",
    style=api_client.ParameterStyle.FORM,
    schema=IsTestDriveSchema,
    explode=True,
)
request_query_edition = api_client.QueryParameter(
    name="Edition",
    style=api_client.ParameterStyle.FORM,
    schema=EditionSchema,
    explode=True,
)
request_query_zone_id = api_client.QueryParameter(
    name="ZoneID",
    style=api_client.ParameterStyle.FORM,
    schema=ZoneIDSchema,
    explode=True,
)
request_query_global_domain_directory_url = api_client.QueryParameter(
    name="GlobalDomainDirectoryURL",
    style=api_client.ParameterStyle.FORM,
    schema=GlobalDomainDirectoryURLSchema,
    explode=True,
)
request_query_is_auto_renew_certs_enabled = api_client.QueryParameter(
    name="IsAutoRenewCertsEnabled",
    style=api_client.ParameterStyle.FORM,
    schema=IsAutoRenewCertsEnabledSchema,
    explode=True,
)
_auth = [
    'bearerAuthToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            Message = schemas.StrSchema
            __annotations__ = {
                "Message": Message,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Message"]) -> MetaOapg.properties.Message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Message"]) -> typing.Union[MetaOapg.properties.Message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Message: typing.Union[MetaOapg.properties.Message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            Message=Message,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


class SchemaFor409ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            Message = schemas.StrSchema
            __annotations__ = {
                "Message": Message,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Message"]) -> MetaOapg.properties.Message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Message"]) -> typing.Union[MetaOapg.properties.Message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Message: typing.Union[MetaOapg.properties.Message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor409ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            Message=Message,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor409ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '403': _response_for_403,
    '409': _response_for_409,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_add_org_post_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         POST /v1/add_org
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_org_name,
            request_query_no_vpn_status,
            request_query_non_access_identity_event_retention_duration_in_hours,
            request_query_access_event_retention_duration_in_hours,
            request_query_identity_event_retention_duration_in_hours,
            request_query_owner_email,
            request_query_first,
            request_query_last,
            request_query_api_server_location,
            request_query_is_tunnel_enabled,
            request_query_is_test_drive,
            request_query_edition,
            request_query_zone_id,
            request_query_global_domain_directory_url,
            request_query_is_auto_renew_certs_enabled,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1AddOrgPost(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_add_org_post(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_add_org_post_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_add_org_post_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


