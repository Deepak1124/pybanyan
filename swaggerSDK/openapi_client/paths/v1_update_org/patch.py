# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# header params
AuthorizationSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            org_id = schemas.StrSchema
            edition = schemas.StrSchema
            owner_password = schemas.StrSchema
            zone_id = schemas.StrSchema
            global_domain_directory_url = schemas.StrSchema
            is_local_login_enabled = schemas.IntSchema
            is_auto_renew_certs_enabled = schemas.IntSchema
            auto_renew_cert_expiry_window_days = schemas.IntSchema
            refresh_token_for_saml_enabled = schemas.BoolSchema
            __annotations__ = {
                "org_id": org_id,
                "edition": edition,
                "owner_password": owner_password,
                "zone_id": zone_id,
                "global_domain_directory_url": global_domain_directory_url,
                "is_local_login_enabled": is_local_login_enabled,
                "is_auto_renew_certs_enabled": is_auto_renew_certs_enabled,
                "auto_renew_cert_expiry_window_days": auto_renew_cert_expiry_window_days,
                "refresh_token_for_saml_enabled": refresh_token_for_saml_enabled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edition"]) -> MetaOapg.properties.edition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_password"]) -> MetaOapg.properties.owner_password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zone_id"]) -> MetaOapg.properties.zone_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["global_domain_directory_url"]) -> MetaOapg.properties.global_domain_directory_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_local_login_enabled"]) -> MetaOapg.properties.is_local_login_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_auto_renew_certs_enabled"]) -> MetaOapg.properties.is_auto_renew_certs_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_renew_cert_expiry_window_days"]) -> MetaOapg.properties.auto_renew_cert_expiry_window_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refresh_token_for_saml_enabled"]) -> MetaOapg.properties.refresh_token_for_saml_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["org_id", "edition", "owner_password", "zone_id", "global_domain_directory_url", "is_local_login_enabled", "is_auto_renew_certs_enabled", "auto_renew_cert_expiry_window_days", "refresh_token_for_saml_enabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union[MetaOapg.properties.edition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_password"]) -> typing.Union[MetaOapg.properties.owner_password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zone_id"]) -> typing.Union[MetaOapg.properties.zone_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["global_domain_directory_url"]) -> typing.Union[MetaOapg.properties.global_domain_directory_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_local_login_enabled"]) -> typing.Union[MetaOapg.properties.is_local_login_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_auto_renew_certs_enabled"]) -> typing.Union[MetaOapg.properties.is_auto_renew_certs_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_renew_cert_expiry_window_days"]) -> typing.Union[MetaOapg.properties.auto_renew_cert_expiry_window_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refresh_token_for_saml_enabled"]) -> typing.Union[MetaOapg.properties.refresh_token_for_saml_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["org_id", "edition", "owner_password", "zone_id", "global_domain_directory_url", "is_local_login_enabled", "is_auto_renew_certs_enabled", "auto_renew_cert_expiry_window_days", "refresh_token_for_saml_enabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        org_id: typing.Union[MetaOapg.properties.org_id, str, schemas.Unset] = schemas.unset,
        edition: typing.Union[MetaOapg.properties.edition, str, schemas.Unset] = schemas.unset,
        owner_password: typing.Union[MetaOapg.properties.owner_password, str, schemas.Unset] = schemas.unset,
        zone_id: typing.Union[MetaOapg.properties.zone_id, str, schemas.Unset] = schemas.unset,
        global_domain_directory_url: typing.Union[MetaOapg.properties.global_domain_directory_url, str, schemas.Unset] = schemas.unset,
        is_local_login_enabled: typing.Union[MetaOapg.properties.is_local_login_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_auto_renew_certs_enabled: typing.Union[MetaOapg.properties.is_auto_renew_certs_enabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        auto_renew_cert_expiry_window_days: typing.Union[MetaOapg.properties.auto_renew_cert_expiry_window_days, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        refresh_token_for_saml_enabled: typing.Union[MetaOapg.properties.refresh_token_for_saml_enabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            org_id=org_id,
            edition=edition,
            owner_password=owner_password,
            zone_id=zone_id,
            global_domain_directory_url=global_domain_directory_url,
            is_local_login_enabled=is_local_login_enabled,
            is_auto_renew_certs_enabled=is_auto_renew_certs_enabled,
            auto_renew_cert_expiry_window_days=auto_renew_cert_expiry_window_days,
            refresh_token_for_saml_enabled=refresh_token_for_saml_enabled,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'bearerSuperAdminToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            request_id = schemas.StrSchema
            error_code = schemas.IntSchema
            error_description = schemas.StrSchema
            
            
            class data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        OrgName = schemas.StrSchema
                        OrgID = schemas.StrSchema
                        OrgRegisterDate = schemas.StrSchema
                        CollectorActive = schemas.StrSchema
                        CIRegistered = schemas.StrSchema
                        RTRegistered = schemas.StrSchema
                        ImagesAfter = schemas.StrSchema
                        MaxPerRepo = schemas.IntSchema
                        HistoryHours = schemas.IntSchema
                        IDPType = schemas.StrSchema
                        MDMName = schemas.StrSchema
                        MDMConfig = schemas.StrSchema
                        IDPName = schemas.StrSchema
                        IDPConfig = schemas.StrSchema
                        DNSName = schemas.StrSchema
                        DNSConfig = schemas.StrSchema
                        NoVPN = schemas.StrSchema
                        LastUpdatedBy = schemas.StrSchema
                        LastUpdatedAt = schemas.IntSchema
                        AccessHistoryHours = schemas.IntSchema
                        TrustConfig = schemas.StrSchema
                        IdentityHistoryHours = schemas.IntSchema
                        CloakExceptions = schemas.StrSchema
                        RootCerts = schemas.StrSchema
                        MDMDeployKey = schemas.StrSchema
                        MDMDeployOTPSkipRole = schemas.StrSchema
                        DeviceRegConfig = schemas.StrSchema
                        DeviceRegIDPName = schemas.StrSchema
                        DeviceRegIDPProto = schemas.StrSchema
                        PWLessConfig = schemas.StrSchema
                        AsyncAuthEnabled = schemas.IntSchema
                        IsTestDrive = schemas.IntSchema
                        IsTunnelEnabled = schemas.IntSchema
                        Edition = schemas.StrSchema
                        ZoneID = schemas.StrSchema
                        IsZTCertUpdateEnabled = schemas.IntSchema
                        GlobalDomainDirectoryURL = schemas.StrSchema
                        EnduserInactivityThresholdDays = schemas.IntSchema
                        IDPRoutedSaasAppRedirectURL = schemas.StrSchema
                        IsLocalLoginEnabled = schemas.IntSchema
                        IsAutoRenewCertsEnabled = schemas.IntSchema
                        IsZTUpnCertEnabled = schemas.IntSchema
                        AutoRenewCertExpiryWindowDays = schemas.IntSchema
                        RefreshTokenForSAMLEnabled = schemas.BoolSchema
                        __annotations__ = {
                            "OrgName": OrgName,
                            "OrgID": OrgID,
                            "OrgRegisterDate": OrgRegisterDate,
                            "CollectorActive": CollectorActive,
                            "CIRegistered": CIRegistered,
                            "RTRegistered": RTRegistered,
                            "ImagesAfter": ImagesAfter,
                            "MaxPerRepo": MaxPerRepo,
                            "HistoryHours": HistoryHours,
                            "IDPType": IDPType,
                            "MDMName": MDMName,
                            "MDMConfig": MDMConfig,
                            "IDPName": IDPName,
                            "IDPConfig": IDPConfig,
                            "DNSName": DNSName,
                            "DNSConfig": DNSConfig,
                            "NoVPN": NoVPN,
                            "LastUpdatedBy": LastUpdatedBy,
                            "LastUpdatedAt": LastUpdatedAt,
                            "AccessHistoryHours": AccessHistoryHours,
                            "TrustConfig": TrustConfig,
                            "IdentityHistoryHours": IdentityHistoryHours,
                            "CloakExceptions": CloakExceptions,
                            "RootCerts": RootCerts,
                            "MDMDeployKey": MDMDeployKey,
                            "MDMDeployOTPSkipRole": MDMDeployOTPSkipRole,
                            "DeviceRegConfig": DeviceRegConfig,
                            "DeviceRegIDPName": DeviceRegIDPName,
                            "DeviceRegIDPProto": DeviceRegIDPProto,
                            "PWLessConfig": PWLessConfig,
                            "AsyncAuthEnabled": AsyncAuthEnabled,
                            "IsTestDrive": IsTestDrive,
                            "IsTunnelEnabled": IsTunnelEnabled,
                            "Edition": Edition,
                            "ZoneID": ZoneID,
                            "IsZTCertUpdateEnabled": IsZTCertUpdateEnabled,
                            "GlobalDomainDirectoryURL": GlobalDomainDirectoryURL,
                            "EnduserInactivityThresholdDays": EnduserInactivityThresholdDays,
                            "IDPRoutedSaasAppRedirectURL": IDPRoutedSaasAppRedirectURL,
                            "IsLocalLoginEnabled": IsLocalLoginEnabled,
                            "IsAutoRenewCertsEnabled": IsAutoRenewCertsEnabled,
                            "IsZTUpnCertEnabled": IsZTUpnCertEnabled,
                            "AutoRenewCertExpiryWindowDays": AutoRenewCertExpiryWindowDays,
                            "RefreshTokenForSAMLEnabled": RefreshTokenForSAMLEnabled,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["OrgName"]) -> MetaOapg.properties.OrgName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["OrgID"]) -> MetaOapg.properties.OrgID: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["OrgRegisterDate"]) -> MetaOapg.properties.OrgRegisterDate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["CollectorActive"]) -> MetaOapg.properties.CollectorActive: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["CIRegistered"]) -> MetaOapg.properties.CIRegistered: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["RTRegistered"]) -> MetaOapg.properties.RTRegistered: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ImagesAfter"]) -> MetaOapg.properties.ImagesAfter: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MaxPerRepo"]) -> MetaOapg.properties.MaxPerRepo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["HistoryHours"]) -> MetaOapg.properties.HistoryHours: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IDPType"]) -> MetaOapg.properties.IDPType: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MDMName"]) -> MetaOapg.properties.MDMName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MDMConfig"]) -> MetaOapg.properties.MDMConfig: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IDPName"]) -> MetaOapg.properties.IDPName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IDPConfig"]) -> MetaOapg.properties.IDPConfig: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DNSName"]) -> MetaOapg.properties.DNSName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DNSConfig"]) -> MetaOapg.properties.DNSConfig: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["NoVPN"]) -> MetaOapg.properties.NoVPN: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["LastUpdatedBy"]) -> MetaOapg.properties.LastUpdatedBy: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> MetaOapg.properties.LastUpdatedAt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AccessHistoryHours"]) -> MetaOapg.properties.AccessHistoryHours: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["TrustConfig"]) -> MetaOapg.properties.TrustConfig: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IdentityHistoryHours"]) -> MetaOapg.properties.IdentityHistoryHours: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["CloakExceptions"]) -> MetaOapg.properties.CloakExceptions: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["RootCerts"]) -> MetaOapg.properties.RootCerts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MDMDeployKey"]) -> MetaOapg.properties.MDMDeployKey: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MDMDeployOTPSkipRole"]) -> MetaOapg.properties.MDMDeployOTPSkipRole: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DeviceRegConfig"]) -> MetaOapg.properties.DeviceRegConfig: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPName"]) -> MetaOapg.properties.DeviceRegIDPName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPProto"]) -> MetaOapg.properties.DeviceRegIDPProto: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["PWLessConfig"]) -> MetaOapg.properties.PWLessConfig: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AsyncAuthEnabled"]) -> MetaOapg.properties.AsyncAuthEnabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IsTestDrive"]) -> MetaOapg.properties.IsTestDrive: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IsTunnelEnabled"]) -> MetaOapg.properties.IsTunnelEnabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Edition"]) -> MetaOapg.properties.Edition: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ZoneID"]) -> MetaOapg.properties.ZoneID: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IsZTCertUpdateEnabled"]) -> MetaOapg.properties.IsZTCertUpdateEnabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["GlobalDomainDirectoryURL"]) -> MetaOapg.properties.GlobalDomainDirectoryURL: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["EnduserInactivityThresholdDays"]) -> MetaOapg.properties.EnduserInactivityThresholdDays: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IDPRoutedSaasAppRedirectURL"]) -> MetaOapg.properties.IDPRoutedSaasAppRedirectURL: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IsLocalLoginEnabled"]) -> MetaOapg.properties.IsLocalLoginEnabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IsAutoRenewCertsEnabled"]) -> MetaOapg.properties.IsAutoRenewCertsEnabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IsZTUpnCertEnabled"]) -> MetaOapg.properties.IsZTUpnCertEnabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AutoRenewCertExpiryWindowDays"]) -> MetaOapg.properties.AutoRenewCertExpiryWindowDays: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["RefreshTokenForSAMLEnabled"]) -> MetaOapg.properties.RefreshTokenForSAMLEnabled: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["OrgName", "OrgID", "OrgRegisterDate", "CollectorActive", "CIRegistered", "RTRegistered", "ImagesAfter", "MaxPerRepo", "HistoryHours", "IDPType", "MDMName", "MDMConfig", "IDPName", "IDPConfig", "DNSName", "DNSConfig", "NoVPN", "LastUpdatedBy", "LastUpdatedAt", "AccessHistoryHours", "TrustConfig", "IdentityHistoryHours", "CloakExceptions", "RootCerts", "MDMDeployKey", "MDMDeployOTPSkipRole", "DeviceRegConfig", "DeviceRegIDPName", "DeviceRegIDPProto", "PWLessConfig", "AsyncAuthEnabled", "IsTestDrive", "IsTunnelEnabled", "Edition", "ZoneID", "IsZTCertUpdateEnabled", "GlobalDomainDirectoryURL", "EnduserInactivityThresholdDays", "IDPRoutedSaasAppRedirectURL", "IsLocalLoginEnabled", "IsAutoRenewCertsEnabled", "IsZTUpnCertEnabled", "AutoRenewCertExpiryWindowDays", "RefreshTokenForSAMLEnabled", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["OrgName"]) -> typing.Union[MetaOapg.properties.OrgName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["OrgID"]) -> typing.Union[MetaOapg.properties.OrgID, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["OrgRegisterDate"]) -> typing.Union[MetaOapg.properties.OrgRegisterDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["CollectorActive"]) -> typing.Union[MetaOapg.properties.CollectorActive, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["CIRegistered"]) -> typing.Union[MetaOapg.properties.CIRegistered, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["RTRegistered"]) -> typing.Union[MetaOapg.properties.RTRegistered, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ImagesAfter"]) -> typing.Union[MetaOapg.properties.ImagesAfter, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MaxPerRepo"]) -> typing.Union[MetaOapg.properties.MaxPerRepo, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["HistoryHours"]) -> typing.Union[MetaOapg.properties.HistoryHours, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IDPType"]) -> typing.Union[MetaOapg.properties.IDPType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MDMName"]) -> typing.Union[MetaOapg.properties.MDMName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MDMConfig"]) -> typing.Union[MetaOapg.properties.MDMConfig, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IDPName"]) -> typing.Union[MetaOapg.properties.IDPName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IDPConfig"]) -> typing.Union[MetaOapg.properties.IDPConfig, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DNSName"]) -> typing.Union[MetaOapg.properties.DNSName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DNSConfig"]) -> typing.Union[MetaOapg.properties.DNSConfig, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["NoVPN"]) -> typing.Union[MetaOapg.properties.NoVPN, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedBy"]) -> typing.Union[MetaOapg.properties.LastUpdatedBy, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> typing.Union[MetaOapg.properties.LastUpdatedAt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AccessHistoryHours"]) -> typing.Union[MetaOapg.properties.AccessHistoryHours, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["TrustConfig"]) -> typing.Union[MetaOapg.properties.TrustConfig, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IdentityHistoryHours"]) -> typing.Union[MetaOapg.properties.IdentityHistoryHours, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["CloakExceptions"]) -> typing.Union[MetaOapg.properties.CloakExceptions, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["RootCerts"]) -> typing.Union[MetaOapg.properties.RootCerts, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MDMDeployKey"]) -> typing.Union[MetaOapg.properties.MDMDeployKey, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MDMDeployOTPSkipRole"]) -> typing.Union[MetaOapg.properties.MDMDeployOTPSkipRole, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegConfig"]) -> typing.Union[MetaOapg.properties.DeviceRegConfig, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPName"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPName, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPProto"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPProto, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["PWLessConfig"]) -> typing.Union[MetaOapg.properties.PWLessConfig, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AsyncAuthEnabled"]) -> typing.Union[MetaOapg.properties.AsyncAuthEnabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IsTestDrive"]) -> typing.Union[MetaOapg.properties.IsTestDrive, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IsTunnelEnabled"]) -> typing.Union[MetaOapg.properties.IsTunnelEnabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Edition"]) -> typing.Union[MetaOapg.properties.Edition, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ZoneID"]) -> typing.Union[MetaOapg.properties.ZoneID, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IsZTCertUpdateEnabled"]) -> typing.Union[MetaOapg.properties.IsZTCertUpdateEnabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["GlobalDomainDirectoryURL"]) -> typing.Union[MetaOapg.properties.GlobalDomainDirectoryURL, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["EnduserInactivityThresholdDays"]) -> typing.Union[MetaOapg.properties.EnduserInactivityThresholdDays, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IDPRoutedSaasAppRedirectURL"]) -> typing.Union[MetaOapg.properties.IDPRoutedSaasAppRedirectURL, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IsLocalLoginEnabled"]) -> typing.Union[MetaOapg.properties.IsLocalLoginEnabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IsAutoRenewCertsEnabled"]) -> typing.Union[MetaOapg.properties.IsAutoRenewCertsEnabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IsZTUpnCertEnabled"]) -> typing.Union[MetaOapg.properties.IsZTUpnCertEnabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AutoRenewCertExpiryWindowDays"]) -> typing.Union[MetaOapg.properties.AutoRenewCertExpiryWindowDays, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["RefreshTokenForSAMLEnabled"]) -> typing.Union[MetaOapg.properties.RefreshTokenForSAMLEnabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["OrgName", "OrgID", "OrgRegisterDate", "CollectorActive", "CIRegistered", "RTRegistered", "ImagesAfter", "MaxPerRepo", "HistoryHours", "IDPType", "MDMName", "MDMConfig", "IDPName", "IDPConfig", "DNSName", "DNSConfig", "NoVPN", "LastUpdatedBy", "LastUpdatedAt", "AccessHistoryHours", "TrustConfig", "IdentityHistoryHours", "CloakExceptions", "RootCerts", "MDMDeployKey", "MDMDeployOTPSkipRole", "DeviceRegConfig", "DeviceRegIDPName", "DeviceRegIDPProto", "PWLessConfig", "AsyncAuthEnabled", "IsTestDrive", "IsTunnelEnabled", "Edition", "ZoneID", "IsZTCertUpdateEnabled", "GlobalDomainDirectoryURL", "EnduserInactivityThresholdDays", "IDPRoutedSaasAppRedirectURL", "IsLocalLoginEnabled", "IsAutoRenewCertsEnabled", "IsZTUpnCertEnabled", "AutoRenewCertExpiryWindowDays", "RefreshTokenForSAMLEnabled", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    OrgName: typing.Union[MetaOapg.properties.OrgName, str, schemas.Unset] = schemas.unset,
                    OrgID: typing.Union[MetaOapg.properties.OrgID, str, schemas.Unset] = schemas.unset,
                    OrgRegisterDate: typing.Union[MetaOapg.properties.OrgRegisterDate, str, schemas.Unset] = schemas.unset,
                    CollectorActive: typing.Union[MetaOapg.properties.CollectorActive, str, schemas.Unset] = schemas.unset,
                    CIRegistered: typing.Union[MetaOapg.properties.CIRegistered, str, schemas.Unset] = schemas.unset,
                    RTRegistered: typing.Union[MetaOapg.properties.RTRegistered, str, schemas.Unset] = schemas.unset,
                    ImagesAfter: typing.Union[MetaOapg.properties.ImagesAfter, str, schemas.Unset] = schemas.unset,
                    MaxPerRepo: typing.Union[MetaOapg.properties.MaxPerRepo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    HistoryHours: typing.Union[MetaOapg.properties.HistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    IDPType: typing.Union[MetaOapg.properties.IDPType, str, schemas.Unset] = schemas.unset,
                    MDMName: typing.Union[MetaOapg.properties.MDMName, str, schemas.Unset] = schemas.unset,
                    MDMConfig: typing.Union[MetaOapg.properties.MDMConfig, str, schemas.Unset] = schemas.unset,
                    IDPName: typing.Union[MetaOapg.properties.IDPName, str, schemas.Unset] = schemas.unset,
                    IDPConfig: typing.Union[MetaOapg.properties.IDPConfig, str, schemas.Unset] = schemas.unset,
                    DNSName: typing.Union[MetaOapg.properties.DNSName, str, schemas.Unset] = schemas.unset,
                    DNSConfig: typing.Union[MetaOapg.properties.DNSConfig, str, schemas.Unset] = schemas.unset,
                    NoVPN: typing.Union[MetaOapg.properties.NoVPN, str, schemas.Unset] = schemas.unset,
                    LastUpdatedBy: typing.Union[MetaOapg.properties.LastUpdatedBy, str, schemas.Unset] = schemas.unset,
                    LastUpdatedAt: typing.Union[MetaOapg.properties.LastUpdatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    AccessHistoryHours: typing.Union[MetaOapg.properties.AccessHistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    TrustConfig: typing.Union[MetaOapg.properties.TrustConfig, str, schemas.Unset] = schemas.unset,
                    IdentityHistoryHours: typing.Union[MetaOapg.properties.IdentityHistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    CloakExceptions: typing.Union[MetaOapg.properties.CloakExceptions, str, schemas.Unset] = schemas.unset,
                    RootCerts: typing.Union[MetaOapg.properties.RootCerts, str, schemas.Unset] = schemas.unset,
                    MDMDeployKey: typing.Union[MetaOapg.properties.MDMDeployKey, str, schemas.Unset] = schemas.unset,
                    MDMDeployOTPSkipRole: typing.Union[MetaOapg.properties.MDMDeployOTPSkipRole, str, schemas.Unset] = schemas.unset,
                    DeviceRegConfig: typing.Union[MetaOapg.properties.DeviceRegConfig, str, schemas.Unset] = schemas.unset,
                    DeviceRegIDPName: typing.Union[MetaOapg.properties.DeviceRegIDPName, str, schemas.Unset] = schemas.unset,
                    DeviceRegIDPProto: typing.Union[MetaOapg.properties.DeviceRegIDPProto, str, schemas.Unset] = schemas.unset,
                    PWLessConfig: typing.Union[MetaOapg.properties.PWLessConfig, str, schemas.Unset] = schemas.unset,
                    AsyncAuthEnabled: typing.Union[MetaOapg.properties.AsyncAuthEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    IsTestDrive: typing.Union[MetaOapg.properties.IsTestDrive, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    IsTunnelEnabled: typing.Union[MetaOapg.properties.IsTunnelEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    Edition: typing.Union[MetaOapg.properties.Edition, str, schemas.Unset] = schemas.unset,
                    ZoneID: typing.Union[MetaOapg.properties.ZoneID, str, schemas.Unset] = schemas.unset,
                    IsZTCertUpdateEnabled: typing.Union[MetaOapg.properties.IsZTCertUpdateEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    GlobalDomainDirectoryURL: typing.Union[MetaOapg.properties.GlobalDomainDirectoryURL, str, schemas.Unset] = schemas.unset,
                    EnduserInactivityThresholdDays: typing.Union[MetaOapg.properties.EnduserInactivityThresholdDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    IDPRoutedSaasAppRedirectURL: typing.Union[MetaOapg.properties.IDPRoutedSaasAppRedirectURL, str, schemas.Unset] = schemas.unset,
                    IsLocalLoginEnabled: typing.Union[MetaOapg.properties.IsLocalLoginEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    IsAutoRenewCertsEnabled: typing.Union[MetaOapg.properties.IsAutoRenewCertsEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    IsZTUpnCertEnabled: typing.Union[MetaOapg.properties.IsZTUpnCertEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    AutoRenewCertExpiryWindowDays: typing.Union[MetaOapg.properties.AutoRenewCertExpiryWindowDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    RefreshTokenForSAMLEnabled: typing.Union[MetaOapg.properties.RefreshTokenForSAMLEnabled, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *args,
                        OrgName=OrgName,
                        OrgID=OrgID,
                        OrgRegisterDate=OrgRegisterDate,
                        CollectorActive=CollectorActive,
                        CIRegistered=CIRegistered,
                        RTRegistered=RTRegistered,
                        ImagesAfter=ImagesAfter,
                        MaxPerRepo=MaxPerRepo,
                        HistoryHours=HistoryHours,
                        IDPType=IDPType,
                        MDMName=MDMName,
                        MDMConfig=MDMConfig,
                        IDPName=IDPName,
                        IDPConfig=IDPConfig,
                        DNSName=DNSName,
                        DNSConfig=DNSConfig,
                        NoVPN=NoVPN,
                        LastUpdatedBy=LastUpdatedBy,
                        LastUpdatedAt=LastUpdatedAt,
                        AccessHistoryHours=AccessHistoryHours,
                        TrustConfig=TrustConfig,
                        IdentityHistoryHours=IdentityHistoryHours,
                        CloakExceptions=CloakExceptions,
                        RootCerts=RootCerts,
                        MDMDeployKey=MDMDeployKey,
                        MDMDeployOTPSkipRole=MDMDeployOTPSkipRole,
                        DeviceRegConfig=DeviceRegConfig,
                        DeviceRegIDPName=DeviceRegIDPName,
                        DeviceRegIDPProto=DeviceRegIDPProto,
                        PWLessConfig=PWLessConfig,
                        AsyncAuthEnabled=AsyncAuthEnabled,
                        IsTestDrive=IsTestDrive,
                        IsTunnelEnabled=IsTunnelEnabled,
                        Edition=Edition,
                        ZoneID=ZoneID,
                        IsZTCertUpdateEnabled=IsZTCertUpdateEnabled,
                        GlobalDomainDirectoryURL=GlobalDomainDirectoryURL,
                        EnduserInactivityThresholdDays=EnduserInactivityThresholdDays,
                        IDPRoutedSaasAppRedirectURL=IDPRoutedSaasAppRedirectURL,
                        IsLocalLoginEnabled=IsLocalLoginEnabled,
                        IsAutoRenewCertsEnabled=IsAutoRenewCertsEnabled,
                        IsZTUpnCertEnabled=IsZTUpnCertEnabled,
                        AutoRenewCertExpiryWindowDays=AutoRenewCertExpiryWindowDays,
                        RefreshTokenForSAMLEnabled=RefreshTokenForSAMLEnabled,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "request_id": request_id,
                "error_code": error_code,
                "error_description": error_description,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_description"]) -> MetaOapg.properties.error_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> typing.Union[MetaOapg.properties.error_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_description"]) -> typing.Union[MetaOapg.properties.error_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "error_code", "error_description", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        error_code: typing.Union[MetaOapg.properties.error_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error_description: typing.Union[MetaOapg.properties.error_description, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            request_id=request_id,
            error_code=error_code,
            error_description=error_description,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '403': _response_for_403,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_update_org_patch_oapg(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Update Org
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_any_type.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='patch'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1UpdateOrgPatch(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_update_org_patch(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_update_org_patch_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpatch(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def patch(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, ],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/json',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_update_org_patch_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


