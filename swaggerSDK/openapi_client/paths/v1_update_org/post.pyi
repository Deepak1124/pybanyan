# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# header params
AuthorizationSchema = schemas.StrSchema
# body param


class SchemaForRequestBodyApplicationXWwwFormUrlencoded(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            ImagesAfter = schemas.StrSchema
            MaxPerRepo = schemas.StrSchema
            IDPType = schemas.StrSchema
            IDPProtocol = schemas.StrSchema
            IDPName = schemas.StrSchema
            IDPConfig = schemas.StrSchema
            DeviceRegIDPName = schemas.StrSchema
            DeviceRegIDPProtocol = schemas.StrSchema
            DeviceRegConfig = schemas.StrSchema
            MDMName = schemas.StrSchema
            MDMConfig = schemas.StrSchema
            TrustConfig = schemas.StrSchema
            CloakExceptions = schemas.StrSchema
            RootCerts = schemas.StrSchema
            IsTunnelEnabled = schemas.StrSchema
            EnableAsyncAuth = schemas.StrSchema
            isZTCertUpdateEnabledValue = schemas.StrSchema
            Edition = schemas.StrSchema
            ZoneID = schemas.StrSchema
            GlobalDomainDirectoryURL = schemas.StrSchema
            EnduserInactivityThresholdDays = schemas.StrSchema
            SupportMessage = schemas.StrSchema
            SupportLinkTitle = schemas.StrSchema
            SupportLinkUrl = schemas.StrSchema
            __annotations__ = {
                "ImagesAfter": ImagesAfter,
                "MaxPerRepo": MaxPerRepo,
                "IDPType": IDPType,
                "IDPProtocol": IDPProtocol,
                "IDPName": IDPName,
                "IDPConfig": IDPConfig,
                "DeviceRegIDPName": DeviceRegIDPName,
                "DeviceRegIDPProtocol": DeviceRegIDPProtocol,
                "DeviceRegConfig": DeviceRegConfig,
                "MDMName": MDMName,
                "MDMConfig": MDMConfig,
                "TrustConfig": TrustConfig,
                "CloakExceptions": CloakExceptions,
                "RootCerts": RootCerts,
                "IsTunnelEnabled": IsTunnelEnabled,
                "EnableAsyncAuth": EnableAsyncAuth,
                "isZTCertUpdateEnabledValue": isZTCertUpdateEnabledValue,
                "Edition": Edition,
                "ZoneID": ZoneID,
                "GlobalDomainDirectoryURL": GlobalDomainDirectoryURL,
                "EnduserInactivityThresholdDays": EnduserInactivityThresholdDays,
                "SupportMessage": SupportMessage,
                "SupportLinkTitle": SupportLinkTitle,
                "SupportLinkUrl": SupportLinkUrl,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ImagesAfter"]) -> MetaOapg.properties.ImagesAfter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MaxPerRepo"]) -> MetaOapg.properties.MaxPerRepo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDPType"]) -> MetaOapg.properties.IDPType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDPProtocol"]) -> MetaOapg.properties.IDPProtocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDPName"]) -> MetaOapg.properties.IDPName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDPConfig"]) -> MetaOapg.properties.IDPConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPName"]) -> MetaOapg.properties.DeviceRegIDPName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPProtocol"]) -> MetaOapg.properties.DeviceRegIDPProtocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceRegConfig"]) -> MetaOapg.properties.DeviceRegConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MDMName"]) -> MetaOapg.properties.MDMName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MDMConfig"]) -> MetaOapg.properties.MDMConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrustConfig"]) -> MetaOapg.properties.TrustConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CloakExceptions"]) -> MetaOapg.properties.CloakExceptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RootCerts"]) -> MetaOapg.properties.RootCerts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsTunnelEnabled"]) -> MetaOapg.properties.IsTunnelEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EnableAsyncAuth"]) -> MetaOapg.properties.EnableAsyncAuth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isZTCertUpdateEnabledValue"]) -> MetaOapg.properties.isZTCertUpdateEnabledValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Edition"]) -> MetaOapg.properties.Edition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ZoneID"]) -> MetaOapg.properties.ZoneID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GlobalDomainDirectoryURL"]) -> MetaOapg.properties.GlobalDomainDirectoryURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EnduserInactivityThresholdDays"]) -> MetaOapg.properties.EnduserInactivityThresholdDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupportMessage"]) -> MetaOapg.properties.SupportMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupportLinkTitle"]) -> MetaOapg.properties.SupportLinkTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupportLinkUrl"]) -> MetaOapg.properties.SupportLinkUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ImagesAfter", "MaxPerRepo", "IDPType", "IDPProtocol", "IDPName", "IDPConfig", "DeviceRegIDPName", "DeviceRegIDPProtocol", "DeviceRegConfig", "MDMName", "MDMConfig", "TrustConfig", "CloakExceptions", "RootCerts", "IsTunnelEnabled", "EnableAsyncAuth", "isZTCertUpdateEnabledValue", "Edition", "ZoneID", "GlobalDomainDirectoryURL", "EnduserInactivityThresholdDays", "SupportMessage", "SupportLinkTitle", "SupportLinkUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ImagesAfter"]) -> typing.Union[MetaOapg.properties.ImagesAfter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MaxPerRepo"]) -> typing.Union[MetaOapg.properties.MaxPerRepo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDPType"]) -> typing.Union[MetaOapg.properties.IDPType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDPProtocol"]) -> typing.Union[MetaOapg.properties.IDPProtocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDPName"]) -> typing.Union[MetaOapg.properties.IDPName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDPConfig"]) -> typing.Union[MetaOapg.properties.IDPConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPName"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPProtocol"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPProtocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegConfig"]) -> typing.Union[MetaOapg.properties.DeviceRegConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MDMName"]) -> typing.Union[MetaOapg.properties.MDMName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MDMConfig"]) -> typing.Union[MetaOapg.properties.MDMConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrustConfig"]) -> typing.Union[MetaOapg.properties.TrustConfig, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CloakExceptions"]) -> typing.Union[MetaOapg.properties.CloakExceptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RootCerts"]) -> typing.Union[MetaOapg.properties.RootCerts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsTunnelEnabled"]) -> typing.Union[MetaOapg.properties.IsTunnelEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EnableAsyncAuth"]) -> typing.Union[MetaOapg.properties.EnableAsyncAuth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isZTCertUpdateEnabledValue"]) -> typing.Union[MetaOapg.properties.isZTCertUpdateEnabledValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Edition"]) -> typing.Union[MetaOapg.properties.Edition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ZoneID"]) -> typing.Union[MetaOapg.properties.ZoneID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GlobalDomainDirectoryURL"]) -> typing.Union[MetaOapg.properties.GlobalDomainDirectoryURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EnduserInactivityThresholdDays"]) -> typing.Union[MetaOapg.properties.EnduserInactivityThresholdDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupportMessage"]) -> typing.Union[MetaOapg.properties.SupportMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupportLinkTitle"]) -> typing.Union[MetaOapg.properties.SupportLinkTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupportLinkUrl"]) -> typing.Union[MetaOapg.properties.SupportLinkUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ImagesAfter", "MaxPerRepo", "IDPType", "IDPProtocol", "IDPName", "IDPConfig", "DeviceRegIDPName", "DeviceRegIDPProtocol", "DeviceRegConfig", "MDMName", "MDMConfig", "TrustConfig", "CloakExceptions", "RootCerts", "IsTunnelEnabled", "EnableAsyncAuth", "isZTCertUpdateEnabledValue", "Edition", "ZoneID", "GlobalDomainDirectoryURL", "EnduserInactivityThresholdDays", "SupportMessage", "SupportLinkTitle", "SupportLinkUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ImagesAfter: typing.Union[MetaOapg.properties.ImagesAfter, str, schemas.Unset] = schemas.unset,
        MaxPerRepo: typing.Union[MetaOapg.properties.MaxPerRepo, str, schemas.Unset] = schemas.unset,
        IDPType: typing.Union[MetaOapg.properties.IDPType, str, schemas.Unset] = schemas.unset,
        IDPProtocol: typing.Union[MetaOapg.properties.IDPProtocol, str, schemas.Unset] = schemas.unset,
        IDPName: typing.Union[MetaOapg.properties.IDPName, str, schemas.Unset] = schemas.unset,
        IDPConfig: typing.Union[MetaOapg.properties.IDPConfig, str, schemas.Unset] = schemas.unset,
        DeviceRegIDPName: typing.Union[MetaOapg.properties.DeviceRegIDPName, str, schemas.Unset] = schemas.unset,
        DeviceRegIDPProtocol: typing.Union[MetaOapg.properties.DeviceRegIDPProtocol, str, schemas.Unset] = schemas.unset,
        DeviceRegConfig: typing.Union[MetaOapg.properties.DeviceRegConfig, str, schemas.Unset] = schemas.unset,
        MDMName: typing.Union[MetaOapg.properties.MDMName, str, schemas.Unset] = schemas.unset,
        MDMConfig: typing.Union[MetaOapg.properties.MDMConfig, str, schemas.Unset] = schemas.unset,
        TrustConfig: typing.Union[MetaOapg.properties.TrustConfig, str, schemas.Unset] = schemas.unset,
        CloakExceptions: typing.Union[MetaOapg.properties.CloakExceptions, str, schemas.Unset] = schemas.unset,
        RootCerts: typing.Union[MetaOapg.properties.RootCerts, str, schemas.Unset] = schemas.unset,
        IsTunnelEnabled: typing.Union[MetaOapg.properties.IsTunnelEnabled, str, schemas.Unset] = schemas.unset,
        EnableAsyncAuth: typing.Union[MetaOapg.properties.EnableAsyncAuth, str, schemas.Unset] = schemas.unset,
        isZTCertUpdateEnabledValue: typing.Union[MetaOapg.properties.isZTCertUpdateEnabledValue, str, schemas.Unset] = schemas.unset,
        Edition: typing.Union[MetaOapg.properties.Edition, str, schemas.Unset] = schemas.unset,
        ZoneID: typing.Union[MetaOapg.properties.ZoneID, str, schemas.Unset] = schemas.unset,
        GlobalDomainDirectoryURL: typing.Union[MetaOapg.properties.GlobalDomainDirectoryURL, str, schemas.Unset] = schemas.unset,
        EnduserInactivityThresholdDays: typing.Union[MetaOapg.properties.EnduserInactivityThresholdDays, str, schemas.Unset] = schemas.unset,
        SupportMessage: typing.Union[MetaOapg.properties.SupportMessage, str, schemas.Unset] = schemas.unset,
        SupportLinkTitle: typing.Union[MetaOapg.properties.SupportLinkTitle, str, schemas.Unset] = schemas.unset,
        SupportLinkUrl: typing.Union[MetaOapg.properties.SupportLinkUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationXWwwFormUrlencoded':
        return super().__new__(
            cls,
            *args,
            ImagesAfter=ImagesAfter,
            MaxPerRepo=MaxPerRepo,
            IDPType=IDPType,
            IDPProtocol=IDPProtocol,
            IDPName=IDPName,
            IDPConfig=IDPConfig,
            DeviceRegIDPName=DeviceRegIDPName,
            DeviceRegIDPProtocol=DeviceRegIDPProtocol,
            DeviceRegConfig=DeviceRegConfig,
            MDMName=MDMName,
            MDMConfig=MDMConfig,
            TrustConfig=TrustConfig,
            CloakExceptions=CloakExceptions,
            RootCerts=RootCerts,
            IsTunnelEnabled=IsTunnelEnabled,
            EnableAsyncAuth=EnableAsyncAuth,
            isZTCertUpdateEnabledValue=isZTCertUpdateEnabledValue,
            Edition=Edition,
            ZoneID=ZoneID,
            GlobalDomainDirectoryURL=GlobalDomainDirectoryURL,
            EnduserInactivityThresholdDays=EnduserInactivityThresholdDays,
            SupportMessage=SupportMessage,
            SupportLinkTitle=SupportLinkTitle,
            SupportLinkUrl=SupportLinkUrl,
            _configuration=_configuration,
            **kwargs,
        )


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            Message = schemas.StrSchema
            __annotations__ = {
                "Message": Message,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Message"]) -> MetaOapg.properties.Message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Message"]) -> typing.Union[MetaOapg.properties.Message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Message: typing.Union[MetaOapg.properties.Message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            Message=Message,
            _configuration=_configuration,
            **kwargs,
        )
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_update_org_post_oapg(
        self: api_client.Api,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/x-www-form-urlencoded',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         Update Org
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_body.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1UpdateOrgPost(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_update_org_post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/x-www-form-urlencoded',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_update_org_post_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        content_type: str = 'application/x-www-form-urlencoded',
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_update_org_post_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


