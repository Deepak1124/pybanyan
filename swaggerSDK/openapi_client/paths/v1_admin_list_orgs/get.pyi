# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# header params
AuthorizationSchema = schemas.StrSchema


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    OrgName = schemas.StrSchema
                    OrgID = schemas.StrSchema
                    OrgRegisterDate = schemas.StrSchema
                    CollectorActive = schemas.StrSchema
                    CIRegistered = schemas.StrSchema
                    RTRegistered = schemas.StrSchema
                    ImagesAfter = schemas.StrSchema
                    MaxPerRepo = schemas.IntSchema
                    HistoryHours = schemas.IntSchema
                    IDPType = schemas.StrSchema
                    IDPName = schemas.StrSchema
                    IDPConfig = schemas.StrSchema
                    IDPProto = schemas.StrSchema
                    MDMName = schemas.StrSchema
                    MDMConfig = schemas.StrSchema
                    NoVPN = schemas.StrSchema
                    DNSName = schemas.StrSchema
                    DNSConfig = schemas.StrSchema
                    LastUpdatedBy = schemas.StrSchema
                    LastUpdatedAt = schemas.IntSchema
                    AccessHistoryHours = schemas.IntSchema
                    TrustConfig = schemas.StrSchema
                    IdentityHistoryHours = schemas.IntSchema
                    CloakExceptions = schemas.StrSchema
                    RootCerts = schemas.StrSchema
                    MDMDeployKey = schemas.StrSchema
                    MDMDeployOTPSkipRole = schemas.StrSchema
                    DeviceRegConfig = schemas.StrSchema
                    DeviceRegIDPName = schemas.StrSchema
                    DeviceRegIDPProto = schemas.StrSchema
                    PWLessConfig = schemas.StrSchema
                    AsyncAuthEnabled = schemas.IntSchema
                    IsTestDrive = schemas.IntSchema
                    IsTunnelEnabled = schemas.IntSchema
                    Edition = schemas.StrSchema
                    ZoneID = schemas.StrSchema
                    IsZTCertUpdateEnabled = schemas.IntSchema
                    GlobalDomainDirectoryURL = schemas.StrSchema
                    EnduserInactivityThresholdDays = schemas.IntSchema
                    IDPRoutedSaasAppRedirectURL = schemas.StrSchema
                    IsLocalLoginEnabled = schemas.IntSchema
                    IsAutoRenewCertsEnabled = schemas.IntSchema
                    IsZTUpnCertEnabled = schemas.IntSchema
                    AutoRenewCertExpiryWindowDays = schemas.IntSchema
                    RefreshTokenForSAMLEnabled = schemas.IntSchema
                    CreatedAt = schemas.IntSchema
                    __annotations__ = {
                        "OrgName": OrgName,
                        "OrgID": OrgID,
                        "OrgRegisterDate": OrgRegisterDate,
                        "CollectorActive": CollectorActive,
                        "CIRegistered": CIRegistered,
                        "RTRegistered": RTRegistered,
                        "ImagesAfter": ImagesAfter,
                        "MaxPerRepo": MaxPerRepo,
                        "HistoryHours": HistoryHours,
                        "IDPType": IDPType,
                        "IDPName": IDPName,
                        "IDPConfig": IDPConfig,
                        "IDPProto": IDPProto,
                        "MDMName": MDMName,
                        "MDMConfig": MDMConfig,
                        "NoVPN": NoVPN,
                        "DNSName": DNSName,
                        "DNSConfig": DNSConfig,
                        "LastUpdatedBy": LastUpdatedBy,
                        "LastUpdatedAt": LastUpdatedAt,
                        "AccessHistoryHours": AccessHistoryHours,
                        "TrustConfig": TrustConfig,
                        "IdentityHistoryHours": IdentityHistoryHours,
                        "CloakExceptions": CloakExceptions,
                        "RootCerts": RootCerts,
                        "MDMDeployKey": MDMDeployKey,
                        "MDMDeployOTPSkipRole": MDMDeployOTPSkipRole,
                        "DeviceRegConfig": DeviceRegConfig,
                        "DeviceRegIDPName": DeviceRegIDPName,
                        "DeviceRegIDPProto": DeviceRegIDPProto,
                        "PWLessConfig": PWLessConfig,
                        "AsyncAuthEnabled": AsyncAuthEnabled,
                        "IsTestDrive": IsTestDrive,
                        "IsTunnelEnabled": IsTunnelEnabled,
                        "Edition": Edition,
                        "ZoneID": ZoneID,
                        "IsZTCertUpdateEnabled": IsZTCertUpdateEnabled,
                        "GlobalDomainDirectoryURL": GlobalDomainDirectoryURL,
                        "EnduserInactivityThresholdDays": EnduserInactivityThresholdDays,
                        "IDPRoutedSaasAppRedirectURL": IDPRoutedSaasAppRedirectURL,
                        "IsLocalLoginEnabled": IsLocalLoginEnabled,
                        "IsAutoRenewCertsEnabled": IsAutoRenewCertsEnabled,
                        "IsZTUpnCertEnabled": IsZTUpnCertEnabled,
                        "AutoRenewCertExpiryWindowDays": AutoRenewCertExpiryWindowDays,
                        "RefreshTokenForSAMLEnabled": RefreshTokenForSAMLEnabled,
                        "CreatedAt": CreatedAt,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["OrgName"]) -> MetaOapg.properties.OrgName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["OrgID"]) -> MetaOapg.properties.OrgID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["OrgRegisterDate"]) -> MetaOapg.properties.OrgRegisterDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CollectorActive"]) -> MetaOapg.properties.CollectorActive: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CIRegistered"]) -> MetaOapg.properties.CIRegistered: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RTRegistered"]) -> MetaOapg.properties.RTRegistered: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ImagesAfter"]) -> MetaOapg.properties.ImagesAfter: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["MaxPerRepo"]) -> MetaOapg.properties.MaxPerRepo: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["HistoryHours"]) -> MetaOapg.properties.HistoryHours: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IDPType"]) -> MetaOapg.properties.IDPType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IDPName"]) -> MetaOapg.properties.IDPName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IDPConfig"]) -> MetaOapg.properties.IDPConfig: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IDPProto"]) -> MetaOapg.properties.IDPProto: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["MDMName"]) -> MetaOapg.properties.MDMName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["MDMConfig"]) -> MetaOapg.properties.MDMConfig: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NoVPN"]) -> MetaOapg.properties.NoVPN: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DNSName"]) -> MetaOapg.properties.DNSName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DNSConfig"]) -> MetaOapg.properties.DNSConfig: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["LastUpdatedBy"]) -> MetaOapg.properties.LastUpdatedBy: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> MetaOapg.properties.LastUpdatedAt: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["AccessHistoryHours"]) -> MetaOapg.properties.AccessHistoryHours: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["TrustConfig"]) -> MetaOapg.properties.TrustConfig: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IdentityHistoryHours"]) -> MetaOapg.properties.IdentityHistoryHours: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CloakExceptions"]) -> MetaOapg.properties.CloakExceptions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RootCerts"]) -> MetaOapg.properties.RootCerts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["MDMDeployKey"]) -> MetaOapg.properties.MDMDeployKey: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["MDMDeployOTPSkipRole"]) -> MetaOapg.properties.MDMDeployOTPSkipRole: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DeviceRegConfig"]) -> MetaOapg.properties.DeviceRegConfig: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPName"]) -> MetaOapg.properties.DeviceRegIDPName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DeviceRegIDPProto"]) -> MetaOapg.properties.DeviceRegIDPProto: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["PWLessConfig"]) -> MetaOapg.properties.PWLessConfig: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["AsyncAuthEnabled"]) -> MetaOapg.properties.AsyncAuthEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IsTestDrive"]) -> MetaOapg.properties.IsTestDrive: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IsTunnelEnabled"]) -> MetaOapg.properties.IsTunnelEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Edition"]) -> MetaOapg.properties.Edition: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ZoneID"]) -> MetaOapg.properties.ZoneID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IsZTCertUpdateEnabled"]) -> MetaOapg.properties.IsZTCertUpdateEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["GlobalDomainDirectoryURL"]) -> MetaOapg.properties.GlobalDomainDirectoryURL: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EnduserInactivityThresholdDays"]) -> MetaOapg.properties.EnduserInactivityThresholdDays: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IDPRoutedSaasAppRedirectURL"]) -> MetaOapg.properties.IDPRoutedSaasAppRedirectURL: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IsLocalLoginEnabled"]) -> MetaOapg.properties.IsLocalLoginEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IsAutoRenewCertsEnabled"]) -> MetaOapg.properties.IsAutoRenewCertsEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["IsZTUpnCertEnabled"]) -> MetaOapg.properties.IsZTUpnCertEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["AutoRenewCertExpiryWindowDays"]) -> MetaOapg.properties.AutoRenewCertExpiryWindowDays: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RefreshTokenForSAMLEnabled"]) -> MetaOapg.properties.RefreshTokenForSAMLEnabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CreatedAt"]) -> MetaOapg.properties.CreatedAt: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["OrgName", "OrgID", "OrgRegisterDate", "CollectorActive", "CIRegistered", "RTRegistered", "ImagesAfter", "MaxPerRepo", "HistoryHours", "IDPType", "IDPName", "IDPConfig", "IDPProto", "MDMName", "MDMConfig", "NoVPN", "DNSName", "DNSConfig", "LastUpdatedBy", "LastUpdatedAt", "AccessHistoryHours", "TrustConfig", "IdentityHistoryHours", "CloakExceptions", "RootCerts", "MDMDeployKey", "MDMDeployOTPSkipRole", "DeviceRegConfig", "DeviceRegIDPName", "DeviceRegIDPProto", "PWLessConfig", "AsyncAuthEnabled", "IsTestDrive", "IsTunnelEnabled", "Edition", "ZoneID", "IsZTCertUpdateEnabled", "GlobalDomainDirectoryURL", "EnduserInactivityThresholdDays", "IDPRoutedSaasAppRedirectURL", "IsLocalLoginEnabled", "IsAutoRenewCertsEnabled", "IsZTUpnCertEnabled", "AutoRenewCertExpiryWindowDays", "RefreshTokenForSAMLEnabled", "CreatedAt", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["OrgName"]) -> typing.Union[MetaOapg.properties.OrgName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["OrgID"]) -> typing.Union[MetaOapg.properties.OrgID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["OrgRegisterDate"]) -> typing.Union[MetaOapg.properties.OrgRegisterDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CollectorActive"]) -> typing.Union[MetaOapg.properties.CollectorActive, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CIRegistered"]) -> typing.Union[MetaOapg.properties.CIRegistered, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RTRegistered"]) -> typing.Union[MetaOapg.properties.RTRegistered, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ImagesAfter"]) -> typing.Union[MetaOapg.properties.ImagesAfter, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["MaxPerRepo"]) -> typing.Union[MetaOapg.properties.MaxPerRepo, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["HistoryHours"]) -> typing.Union[MetaOapg.properties.HistoryHours, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IDPType"]) -> typing.Union[MetaOapg.properties.IDPType, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IDPName"]) -> typing.Union[MetaOapg.properties.IDPName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IDPConfig"]) -> typing.Union[MetaOapg.properties.IDPConfig, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IDPProto"]) -> typing.Union[MetaOapg.properties.IDPProto, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["MDMName"]) -> typing.Union[MetaOapg.properties.MDMName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["MDMConfig"]) -> typing.Union[MetaOapg.properties.MDMConfig, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NoVPN"]) -> typing.Union[MetaOapg.properties.NoVPN, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DNSName"]) -> typing.Union[MetaOapg.properties.DNSName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DNSConfig"]) -> typing.Union[MetaOapg.properties.DNSConfig, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedBy"]) -> typing.Union[MetaOapg.properties.LastUpdatedBy, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["LastUpdatedAt"]) -> typing.Union[MetaOapg.properties.LastUpdatedAt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["AccessHistoryHours"]) -> typing.Union[MetaOapg.properties.AccessHistoryHours, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["TrustConfig"]) -> typing.Union[MetaOapg.properties.TrustConfig, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IdentityHistoryHours"]) -> typing.Union[MetaOapg.properties.IdentityHistoryHours, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CloakExceptions"]) -> typing.Union[MetaOapg.properties.CloakExceptions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RootCerts"]) -> typing.Union[MetaOapg.properties.RootCerts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["MDMDeployKey"]) -> typing.Union[MetaOapg.properties.MDMDeployKey, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["MDMDeployOTPSkipRole"]) -> typing.Union[MetaOapg.properties.MDMDeployOTPSkipRole, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegConfig"]) -> typing.Union[MetaOapg.properties.DeviceRegConfig, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPName"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DeviceRegIDPProto"]) -> typing.Union[MetaOapg.properties.DeviceRegIDPProto, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["PWLessConfig"]) -> typing.Union[MetaOapg.properties.PWLessConfig, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["AsyncAuthEnabled"]) -> typing.Union[MetaOapg.properties.AsyncAuthEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IsTestDrive"]) -> typing.Union[MetaOapg.properties.IsTestDrive, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IsTunnelEnabled"]) -> typing.Union[MetaOapg.properties.IsTunnelEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Edition"]) -> typing.Union[MetaOapg.properties.Edition, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ZoneID"]) -> typing.Union[MetaOapg.properties.ZoneID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IsZTCertUpdateEnabled"]) -> typing.Union[MetaOapg.properties.IsZTCertUpdateEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["GlobalDomainDirectoryURL"]) -> typing.Union[MetaOapg.properties.GlobalDomainDirectoryURL, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EnduserInactivityThresholdDays"]) -> typing.Union[MetaOapg.properties.EnduserInactivityThresholdDays, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IDPRoutedSaasAppRedirectURL"]) -> typing.Union[MetaOapg.properties.IDPRoutedSaasAppRedirectURL, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IsLocalLoginEnabled"]) -> typing.Union[MetaOapg.properties.IsLocalLoginEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IsAutoRenewCertsEnabled"]) -> typing.Union[MetaOapg.properties.IsAutoRenewCertsEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["IsZTUpnCertEnabled"]) -> typing.Union[MetaOapg.properties.IsZTUpnCertEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["AutoRenewCertExpiryWindowDays"]) -> typing.Union[MetaOapg.properties.AutoRenewCertExpiryWindowDays, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RefreshTokenForSAMLEnabled"]) -> typing.Union[MetaOapg.properties.RefreshTokenForSAMLEnabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CreatedAt"]) -> typing.Union[MetaOapg.properties.CreatedAt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["OrgName", "OrgID", "OrgRegisterDate", "CollectorActive", "CIRegistered", "RTRegistered", "ImagesAfter", "MaxPerRepo", "HistoryHours", "IDPType", "IDPName", "IDPConfig", "IDPProto", "MDMName", "MDMConfig", "NoVPN", "DNSName", "DNSConfig", "LastUpdatedBy", "LastUpdatedAt", "AccessHistoryHours", "TrustConfig", "IdentityHistoryHours", "CloakExceptions", "RootCerts", "MDMDeployKey", "MDMDeployOTPSkipRole", "DeviceRegConfig", "DeviceRegIDPName", "DeviceRegIDPProto", "PWLessConfig", "AsyncAuthEnabled", "IsTestDrive", "IsTunnelEnabled", "Edition", "ZoneID", "IsZTCertUpdateEnabled", "GlobalDomainDirectoryURL", "EnduserInactivityThresholdDays", "IDPRoutedSaasAppRedirectURL", "IsLocalLoginEnabled", "IsAutoRenewCertsEnabled", "IsZTUpnCertEnabled", "AutoRenewCertExpiryWindowDays", "RefreshTokenForSAMLEnabled", "CreatedAt", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                OrgName: typing.Union[MetaOapg.properties.OrgName, str, schemas.Unset] = schemas.unset,
                OrgID: typing.Union[MetaOapg.properties.OrgID, str, schemas.Unset] = schemas.unset,
                OrgRegisterDate: typing.Union[MetaOapg.properties.OrgRegisterDate, str, schemas.Unset] = schemas.unset,
                CollectorActive: typing.Union[MetaOapg.properties.CollectorActive, str, schemas.Unset] = schemas.unset,
                CIRegistered: typing.Union[MetaOapg.properties.CIRegistered, str, schemas.Unset] = schemas.unset,
                RTRegistered: typing.Union[MetaOapg.properties.RTRegistered, str, schemas.Unset] = schemas.unset,
                ImagesAfter: typing.Union[MetaOapg.properties.ImagesAfter, str, schemas.Unset] = schemas.unset,
                MaxPerRepo: typing.Union[MetaOapg.properties.MaxPerRepo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                HistoryHours: typing.Union[MetaOapg.properties.HistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                IDPType: typing.Union[MetaOapg.properties.IDPType, str, schemas.Unset] = schemas.unset,
                IDPName: typing.Union[MetaOapg.properties.IDPName, str, schemas.Unset] = schemas.unset,
                IDPConfig: typing.Union[MetaOapg.properties.IDPConfig, str, schemas.Unset] = schemas.unset,
                IDPProto: typing.Union[MetaOapg.properties.IDPProto, str, schemas.Unset] = schemas.unset,
                MDMName: typing.Union[MetaOapg.properties.MDMName, str, schemas.Unset] = schemas.unset,
                MDMConfig: typing.Union[MetaOapg.properties.MDMConfig, str, schemas.Unset] = schemas.unset,
                NoVPN: typing.Union[MetaOapg.properties.NoVPN, str, schemas.Unset] = schemas.unset,
                DNSName: typing.Union[MetaOapg.properties.DNSName, str, schemas.Unset] = schemas.unset,
                DNSConfig: typing.Union[MetaOapg.properties.DNSConfig, str, schemas.Unset] = schemas.unset,
                LastUpdatedBy: typing.Union[MetaOapg.properties.LastUpdatedBy, str, schemas.Unset] = schemas.unset,
                LastUpdatedAt: typing.Union[MetaOapg.properties.LastUpdatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                AccessHistoryHours: typing.Union[MetaOapg.properties.AccessHistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                TrustConfig: typing.Union[MetaOapg.properties.TrustConfig, str, schemas.Unset] = schemas.unset,
                IdentityHistoryHours: typing.Union[MetaOapg.properties.IdentityHistoryHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                CloakExceptions: typing.Union[MetaOapg.properties.CloakExceptions, str, schemas.Unset] = schemas.unset,
                RootCerts: typing.Union[MetaOapg.properties.RootCerts, str, schemas.Unset] = schemas.unset,
                MDMDeployKey: typing.Union[MetaOapg.properties.MDMDeployKey, str, schemas.Unset] = schemas.unset,
                MDMDeployOTPSkipRole: typing.Union[MetaOapg.properties.MDMDeployOTPSkipRole, str, schemas.Unset] = schemas.unset,
                DeviceRegConfig: typing.Union[MetaOapg.properties.DeviceRegConfig, str, schemas.Unset] = schemas.unset,
                DeviceRegIDPName: typing.Union[MetaOapg.properties.DeviceRegIDPName, str, schemas.Unset] = schemas.unset,
                DeviceRegIDPProto: typing.Union[MetaOapg.properties.DeviceRegIDPProto, str, schemas.Unset] = schemas.unset,
                PWLessConfig: typing.Union[MetaOapg.properties.PWLessConfig, str, schemas.Unset] = schemas.unset,
                AsyncAuthEnabled: typing.Union[MetaOapg.properties.AsyncAuthEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                IsTestDrive: typing.Union[MetaOapg.properties.IsTestDrive, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                IsTunnelEnabled: typing.Union[MetaOapg.properties.IsTunnelEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                Edition: typing.Union[MetaOapg.properties.Edition, str, schemas.Unset] = schemas.unset,
                ZoneID: typing.Union[MetaOapg.properties.ZoneID, str, schemas.Unset] = schemas.unset,
                IsZTCertUpdateEnabled: typing.Union[MetaOapg.properties.IsZTCertUpdateEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                GlobalDomainDirectoryURL: typing.Union[MetaOapg.properties.GlobalDomainDirectoryURL, str, schemas.Unset] = schemas.unset,
                EnduserInactivityThresholdDays: typing.Union[MetaOapg.properties.EnduserInactivityThresholdDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                IDPRoutedSaasAppRedirectURL: typing.Union[MetaOapg.properties.IDPRoutedSaasAppRedirectURL, str, schemas.Unset] = schemas.unset,
                IsLocalLoginEnabled: typing.Union[MetaOapg.properties.IsLocalLoginEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                IsAutoRenewCertsEnabled: typing.Union[MetaOapg.properties.IsAutoRenewCertsEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                IsZTUpnCertEnabled: typing.Union[MetaOapg.properties.IsZTUpnCertEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                AutoRenewCertExpiryWindowDays: typing.Union[MetaOapg.properties.AutoRenewCertExpiryWindowDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                RefreshTokenForSAMLEnabled: typing.Union[MetaOapg.properties.RefreshTokenForSAMLEnabled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                CreatedAt: typing.Union[MetaOapg.properties.CreatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    OrgName=OrgName,
                    OrgID=OrgID,
                    OrgRegisterDate=OrgRegisterDate,
                    CollectorActive=CollectorActive,
                    CIRegistered=CIRegistered,
                    RTRegistered=RTRegistered,
                    ImagesAfter=ImagesAfter,
                    MaxPerRepo=MaxPerRepo,
                    HistoryHours=HistoryHours,
                    IDPType=IDPType,
                    IDPName=IDPName,
                    IDPConfig=IDPConfig,
                    IDPProto=IDPProto,
                    MDMName=MDMName,
                    MDMConfig=MDMConfig,
                    NoVPN=NoVPN,
                    DNSName=DNSName,
                    DNSConfig=DNSConfig,
                    LastUpdatedBy=LastUpdatedBy,
                    LastUpdatedAt=LastUpdatedAt,
                    AccessHistoryHours=AccessHistoryHours,
                    TrustConfig=TrustConfig,
                    IdentityHistoryHours=IdentityHistoryHours,
                    CloakExceptions=CloakExceptions,
                    RootCerts=RootCerts,
                    MDMDeployKey=MDMDeployKey,
                    MDMDeployOTPSkipRole=MDMDeployOTPSkipRole,
                    DeviceRegConfig=DeviceRegConfig,
                    DeviceRegIDPName=DeviceRegIDPName,
                    DeviceRegIDPProto=DeviceRegIDPProto,
                    PWLessConfig=PWLessConfig,
                    AsyncAuthEnabled=AsyncAuthEnabled,
                    IsTestDrive=IsTestDrive,
                    IsTunnelEnabled=IsTunnelEnabled,
                    Edition=Edition,
                    ZoneID=ZoneID,
                    IsZTCertUpdateEnabled=IsZTCertUpdateEnabled,
                    GlobalDomainDirectoryURL=GlobalDomainDirectoryURL,
                    EnduserInactivityThresholdDays=EnduserInactivityThresholdDays,
                    IDPRoutedSaasAppRedirectURL=IDPRoutedSaasAppRedirectURL,
                    IsLocalLoginEnabled=IsLocalLoginEnabled,
                    IsAutoRenewCertsEnabled=IsAutoRenewCertsEnabled,
                    IsZTUpnCertEnabled=IsZTUpnCertEnabled,
                    AutoRenewCertExpiryWindowDays=AutoRenewCertExpiryWindowDays,
                    RefreshTokenForSAMLEnabled=RefreshTokenForSAMLEnabled,
                    CreatedAt=CreatedAt,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _v1_admin_list_orgs_get_oapg(
        self: api_client.Api,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
         GET /v1/admin/list_orgs
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class V1AdminListOrgsGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def v1_admin_list_orgs_get(
        self: BaseApi,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_admin_list_orgs_get_oapg(
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._v1_admin_list_orgs_get_oapg(
            header_params=header_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


